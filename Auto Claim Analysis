{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":110281,"databundleVersionId":13391012,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/jaskafrans880/auto-claim-analysis?scriptVersionId=263820884\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Auto-Claim Genius: An AI-Powered Insurance Claims Resolution Engine\n\n### Problem Statement\nThe auto insurance industry is inundated with a complex mix of structured and unstructured data, from policy details and vehicle specifications to raw accident images and textual descriptions. The traditional process of manually reviewing this data to assess damage, determine fault, and estimate repair costs is notoriously slow, inconsistent, and resource-intensive. This inefficiency creates a significant operational bottleneck, leading to delayed resolutions, increased costs, and a frustrating customer experience. The core problem is not a lack of data, but the inability to unlock and synthesize insights from these varied formats at scale.\n\n### Impact Statement\nAuto-Claim Genius directly addresses this challenge by creating an end-to-end, AI-driven workflow within Google BigQuery. Our solution transforms the claims process from a manual, multi-day task into a streamlined, automated analysis. The material impact is a significant **reduction in claim cycle times**, a **decrease in operational overhead**, and a **dramatic improvement in the consistency and accuracy of initial damage assessments**. This allows claims adjusters to focus their expertise on the most complex cases, leading to faster payouts, reduced fraud, and ultimately, higher customer satisfaction and retention.\n\n---\n\n## Solution Overview & Technical Walkthrough\n\nAuto-Claim Genius is a working prototype that demonstrates how BigQuery's native AI capabilities can build an intelligent business application directly on top of a data warehouse. Our solution follows a three-phase process to turn raw, mixed-format data into polished, actionable business intelligence.\n\n### Phase 1: Data Preparation & Multimodal Enrichment\nThis phase addresses the challenge of combining disparate data sources into a single, analysis-ready master table. We heavily utilized **BigFrames**, the Python API for BigQuery, to perform large-scale data manipulation without moving data out of the warehouse.\n\n*   **Unified Data Loading:** We began by loading our structured tables (`Claims`, `Policies`, `Vehicles`, `Policyholders`) and unstructured data sources (`claim_images_raw`, `Image_Claims_Analysis`) into BigFrames DataFrames.\n*   **Multimodal Fusion:** We then performed a series of joins to create a master feature table. This process seamlessly combines structured data (e.g., `accident_type`, `vehicle_age`) with unstructured data (the text description of accident images), a core tenet of the **Multimodal Pioneer** approach.\n*   **Feature Engineering:** We derived new, valuable features directly in BigQuery, such as `days_to_file_claim` and `composite_risk_score`, to provide richer context for our AI models.\n\n### Phase 2: AI-Powered Prediction of Key Claim Attributes\nThis is the heart of our solution and a direct implementation of the **AI Architect** approach. The goal was to use generative AI to intelligently predict and fill in the five critical, but often missing, columns in our claims dataset.\n\n*   **Contextual Prompting:** For each claim, we dynamically constructed a rich, contextual prompt. This prompt provided the Gemini model with a comprehensive summary of the incident, including structured data points and the unstructured text analysis of the accident image.\n*   **Generative Prediction with Gemini:** We used `bigframes.ml.llm.GeminiTextGenerator` to analyze this prompt and generate predictions for the five target fields:\n    *   `airbag_deployed` (True/False)\n    *   `drivable_post_accident` (True/False)\n    *   `predicted_damage_severity` (Low, Medium, or High)\n    *   `predicted_quote` (A specific USD amount)\n    *   `damage_location` (e.g., Front Bumper)\n*   **Robust Parsing:** To ensure data quality, we applied robust parsing techniques using regular expressions (`regex`) to extract the structured information from the model's text output and populate our final DataFrame.","metadata":{}},{"cell_type":"markdown","source":"### 🎥 Project Demo Video\n\nTo provide a comprehensive overview of our solution, we have created a short video walkthrough. It covers the business problem, our technical approach using BigQuery and Gemini, and a live demonstration of the final **Auto-Claim Genius** dashboard.\n\n<br>\n\n<div align=\"center\">\n  <a href=\"https://youtu.be/4sbTupsdsmI\">\n    <img src=\"https://i.imgur.com/your-thumbnail-image.png\" alt=\"Watch the Demo Video\" width=\"700\">\n  </a>\n  <p><strong><a href=\"https://youtu.be/4sbTupsdsmI\">Click Here to Watch the Full Demo on YouTube</a></strong></p>\n</div>\n\n<br>","metadata":{}},{"cell_type":"markdown","source":"### 📄 Project Source Code on GitHub\n\nThe complete Jupyter Notebook for this project is available for review in our public GitHub repository.\n\n**[Link to Notebook: auto-claim-analysis.ipynb](https://github.com/jaskaransinghkohli/c-AssignmentPractice/blob/11eaccb34e771e6ead601f7cf11735ca7f0bae9f/auto-claim-analysis.ipynb)**","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:51:17.621518Z","iopub.execute_input":"2025-09-24T19:51:17.621956Z","iopub.status.idle":"2025-09-24T19:51:17.640703Z","shell.execute_reply.started":"2025-09-24T19:51:17.621931Z","shell.execute_reply":"2025-09-24T19:51:17.639428Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/bigquery-ai-hackathon/survey.txt\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"!pip install google-cloud-bigquery[bqstorage]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:51:17.642124Z","iopub.execute_input":"2025-09-24T19:51:17.642543Z","iopub.status.idle":"2025-09-24T19:51:21.631282Z","shell.execute_reply.started":"2025-09-24T19:51:17.642519Z","shell.execute_reply":"2025-09-24T19:51:21.630007Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: google-cloud-bigquery[bqstorage] in /usr/local/lib/python3.11/dist-packages (3.25.0)\nRequirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-cloud-bigquery[bqstorage]) (1.34.1)\nRequirement already satisfied: google-auth<3.0.0dev,>=2.14.1 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery[bqstorage]) (2.40.3)\nRequirement already satisfied: google-cloud-core<3.0.0dev,>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery[bqstorage]) (2.4.3)\nRequirement already satisfied: google-resumable-media<3.0dev,>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery[bqstorage]) (2.7.2)\nRequirement already satisfied: packaging>=20.0.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery[bqstorage]) (25.0)\nRequirement already satisfied: python-dateutil<3.0dev,>=2.7.2 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery[bqstorage]) (2.9.0.post0)\nRequirement already satisfied: requests<3.0.0dev,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery[bqstorage]) (2.32.4)\nRequirement already satisfied: google-cloud-bigquery-storage<3.0.0dev,>=2.6.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery[bqstorage]) (2.33.1)\nRequirement already satisfied: grpcio<2.0dev,>=1.47.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery[bqstorage]) (1.73.1)\nRequirement already satisfied: pyarrow>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery[bqstorage]) (19.0.1)\nRequirement already satisfied: googleapis-common-protos<2.0dev,>=1.56.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-cloud-bigquery[bqstorage]) (1.70.0)\nRequirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<4.0.0dev,>=3.19.5 in /usr/local/lib/python3.11/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-cloud-bigquery[bqstorage]) (3.20.3)\nRequirement already satisfied: grpcio-status<2.0dev,>=1.33.2 in /usr/local/lib/python3.11/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-cloud-bigquery[bqstorage]) (1.49.0rc1)\nRequirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth<3.0.0dev,>=2.14.1->google-cloud-bigquery[bqstorage]) (5.5.2)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth<3.0.0dev,>=2.14.1->google-cloud-bigquery[bqstorage]) (0.4.2)\nRequirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth<3.0.0dev,>=2.14.1->google-cloud-bigquery[bqstorage]) (4.9.1)\nRequirement already satisfied: proto-plus<2.0.0,>=1.22.3 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery-storage<3.0.0dev,>=2.6.0->google-cloud-bigquery[bqstorage]) (1.26.1)\nRequirement already satisfied: google-crc32c<2.0dev,>=1.0 in /usr/local/lib/python3.11/dist-packages (from google-resumable-media<3.0dev,>=0.6.0->google-cloud-bigquery[bqstorage]) (1.7.1)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil<3.0dev,>=2.7.2->google-cloud-bigquery[bqstorage]) (1.17.0)\nRequirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.21.0->google-cloud-bigquery[bqstorage]) (3.4.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.21.0->google-cloud-bigquery[bqstorage]) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.21.0->google-cloud-bigquery[bqstorage]) (2.5.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3.0.0dev,>=2.21.0->google-cloud-bigquery[bqstorage]) (2025.6.15)\nRequirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3.0.0dev,>=2.14.1->google-cloud-bigquery[bqstorage]) (0.6.1)\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"import os\nos.environ['PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION'] = 'python'\nprint(\"Step 1 complete. Now RESTART the kernel (Runtime -> Restart Runtime)\")\nprint(\"Then run Cell 2 below.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:51:21.632932Z","iopub.execute_input":"2025-09-24T19:51:21.63326Z","iopub.status.idle":"2025-09-24T19:51:21.640466Z","shell.execute_reply.started":"2025-09-24T19:51:21.633222Z","shell.execute_reply":"2025-09-24T19:51:21.639372Z"}},"outputs":[{"name":"stdout","text":"Step 1 complete. Now RESTART the kernel (Runtime -> Restart Runtime)\nThen run Cell 2 below.\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"# !pip install --upgrade google-cloud-bigquery==3.31.0\n# !pip install rich==13.7.1\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:51:21.643095Z","iopub.execute_input":"2025-09-24T19:51:21.643382Z","iopub.status.idle":"2025-09-24T19:51:21.66295Z","shell.execute_reply.started":"2025-09-24T19:51:21.643362Z","shell.execute_reply":"2025-09-24T19:51:21.661619Z"}},"outputs":[],"execution_count":29},{"cell_type":"markdown","source":"### **Connecting to BigQuery: A Universal Approach**\n\nTo ensure this notebook is fully reproducible for both the project editors and the Kaggle judges, we've implemented a robust, dual-path connection method. This initial code block handles all authentication and client initialization for the entire session.\n\n**How it Works:**\n\n1.  **Editor Mode (Private Access):** The code first attempts to connect using Kaggle Secrets. If a `GOOGLE_APPLICATION_CREDENTIALS` secret is found, it establishes a secure connection using our private service account. This is the path used during development.\n\n2.  **Public Mode (Public Access):** If the secret is not found (which will be the case for judges and public viewers), the code gracefully falls back to Kaggle's default user authentication. This method will work seamlessly and without requiring any setup from the user, provided that our project's BigQuery dataset (`bqhackathonautoianalysis.autoAnalysis_Dataset`) has been made publicly accessible with the \"BigQuery Data Viewer\" role.\n\nThis approach guarantees that anyone can run the notebook from top to bottom, either leveraging private credentials if available or using public, read-only access to the data, ensuring a smooth and error-free evaluation experience.","metadata":{}},{"cell_type":"code","source":"# ===================================================================\n# DUAL-PATH BIGQUERY CONNECTION FOR KAGGLE NOTEBOOKS\n# -------------------------------------------------------------------\n# This cell creates a robust connection that works in two modes:\n# 1. EDITOR MODE: If Kaggle Secrets are available, it uses them for\n#    private, authenticated access.\n# 2. PUBLIC MODE: If secrets are NOT found, it falls back to public\n#    authentication, which works for judges and public viewers if the\n#    dataset is public.\n# ===================================================================\n\n# --- Step 1: Necessary Imports ---\nimport os\nfrom google.colab import auth\nfrom google.cloud import bigquery\nimport bigframes.pandas as bf\nfrom kaggle_secrets import UserSecretsClient\n\n# --- Step 2: Define Project Constants ---\nproject_id = \"bqhackathonautoianalysis\"\nlocation = \"us-central1\"\n\n# --- Step 3: Clean up any previous BigFrames session ---\n# This prevents hanging issues on re-runs.\ntry:\n    bf.close_session()\nexcept Exception:\n    pass\n\n# --- Step 4: Attempt Authentication ---\nprint(\"Attempting to connect to BigQuery...\")\nclient = None\nauth_method = \"Unknown\"\n\ntry:\n    # --- PATH 1: EDITOR MODE (using Kaggle Secrets) ---\n    print(\"  -> Trying Editor Mode (using Kaggle Secrets)...\")\n    \n    user_secrets = UserSecretsClient()\n    service_account_info = user_secrets.get_secret(\"GOOGLE_APPLICATION_CREDENTIALS\")\n    \n    # Write the secret to a temporary file\n    with open('/tmp/service-account-key.json', 'w') as f:\n        f.write(service_account_info)\n    \n    # Set the environment variable for automatic authentication\n    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = '/tmp/service-account-key.json'\n    \n    # Initialize clients (they will automatically use the environment variable)\n    client = bigquery.Client(project=project_id)\n    bf.options.bigquery.project = project_id\n    bf.options.bigquery.location = location\n    \n    auth_method = \"Kaggle Secrets\"\n    print(\"✅ Successfully connected using Editor Mode (Kaggle Secrets).\")\n\nexcept Exception:\n    # --- PATH 2: PUBLIC MODE (using default authentication) ---\n    print(\"  -> Kaggle Secrets not found. Falling back to Public Mode...\")\n    \n    try:\n        # Authenticate the user for the session (triggers pop-up for owner, automatic for public)\n        auth.authenticate_user()\n        \n        # Explicitly get the credentials to pass to the clients\n        credentials, _ = auth.default()\n\n        client = bigquery.Client(project=project_id, credentials=credentials)\n        bf.options.bigquery.project = project_id\n        bf.options.bigquery.location = location\n        bf.options.bigquery.credentials = credentials\n        \n        auth_method = \"Public Authentication\"\n        print(\"✅ Successfully connected using Public Mode.\")\n        \n    except Exception as e:\n        print(f\"❌ Public authentication also failed. Error: {e}\")\n        auth_method = \"Failed\"\n\n# --- Step 5: Final Connection Test ---\nif client:\n    try:\n        test_query = f\"SELECT COUNT(*) as total_rows FROM `{project_id}.autoAnalysis_Dataset.Claims`\"\n        result = client.query(test_query).to_dataframe()\n        print(\"\\n---------------------------------------------------------\")\n        print(f\"🎉 SUCCESS! Connection established via '{auth_method}'.\")\n        print(f\"Total rows in the Claims table: {result['total_rows'].iloc[0]}\")\n        print(\"---------------------------------------------------------\")\n    except Exception as e:\n        print(f\"❌ Connection test failed after authenticating via '{auth_method}'.\")\n        print(f\"   Error: {e}\")\nelse:\n    print(\"\\n❌ Could not establish a BigQuery client.\")\n    print(\"\\nTroubleshooting:\")\n    print(\"  - For Editors: Ensure your Kaggle secret is named 'GOOGLE_APPLICATION_CREDENTIALS'.\")\n    print(\"  - For Public Users/Judges: The dataset 'bqhackathonautoianalysis.autoAnalysis_Dataset' must be made public.\")\n\n# ===================================================================","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:51:21.66403Z","iopub.execute_input":"2025-09-24T19:51:21.664395Z","iopub.status.idle":"2025-09-24T19:51:24.179918Z","shell.execute_reply.started":"2025-09-24T19:51:21.664371Z","shell.execute_reply":"2025-09-24T19:51:24.178889Z"}},"outputs":[{"name":"stdout","text":"Attempting to connect to BigQuery...\n  -> Trying Editor Mode (using Kaggle Secrets)...\n✅ Successfully connected using Editor Mode (Kaggle Secrets).\n\n---------------------------------------------------------\n🎉 SUCCESS! Connection established via 'Kaggle Secrets'.\nTotal rows in the Claims table: 70\n---------------------------------------------------------\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"sql = \"\"\"\nSELECT * FROM `bqhackathonautoianalysis.autoAnalysis_Dataset.Policies` \n\"\"\"\ndf = client.query(sql).to_dataframe()\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:51:24.181005Z","iopub.execute_input":"2025-09-24T19:51:24.181284Z","iopub.status.idle":"2025-09-24T19:51:25.907577Z","shell.execute_reply.started":"2025-09-24T19:51:24.181262Z","shell.execute_reply":"2025-09-24T19:51:25.906594Z"}},"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"      policy_id policyholder_id                vin  start_date    end_date  \\\n0   PLCY-365737        PH-64503  ZGY7WL956RJ516023  2024-06-07  2025-06-07   \n1   PLCY-205899        PH-10053  4KLW00K34GU905842  2023-10-24  2024-10-23   \n2   PLCY-503004        PH-51346  3PRU6FJM2JM866469  2023-11-06  2024-11-05   \n3   PLCY-599856        PH-54783  2NMFZ6LT6RK320517  2023-10-06  2024-10-05   \n4   PLCY-562791        PH-39886  ZRDL46SB4LF706133  2023-12-17  2024-12-16   \n..          ...             ...                ...         ...         ...   \n65  PLCY-192524        PH-83001  4AHMDLLR4CB340093  2023-12-30  2024-12-29   \n66  PLCY-901441        PH-96423  2RD942G8XYD262536  2024-08-13  2025-08-13   \n67  PLCY-620218        PH-85707  SCL8W03G4JD592597  2024-05-07  2025-05-07   \n68  PLCY-630841        PH-60293  4BAX5HWD6FH046845  2024-03-22  2025-03-22   \n69  PLCY-116161        PH-84508  4CL7Z05W5GK626891  2023-11-21  2024-11-20   \n\n    premium_amount  deductible_amount  coverage_limit policy_type  \n0          1233.52              250.0         75000.0   Collision  \n1          1188.96              250.0        100000.0   Collision  \n2           852.58              250.0         75000.0   Collision  \n3          1017.26              250.0         25000.0   Collision  \n4          1063.60              250.0         50000.0   Collision  \n..             ...                ...             ...         ...  \n65         1242.62             1000.0         50000.0   Liability  \n66          776.96             1000.0         25000.0   Liability  \n67         1035.88             1000.0         75000.0   Liability  \n68         1374.67             1000.0         50000.0   Liability  \n69         1102.18             1000.0         75000.0   Liability  \n\n[70 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>policy_id</th>\n      <th>policyholder_id</th>\n      <th>vin</th>\n      <th>start_date</th>\n      <th>end_date</th>\n      <th>premium_amount</th>\n      <th>deductible_amount</th>\n      <th>coverage_limit</th>\n      <th>policy_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>PLCY-365737</td>\n      <td>PH-64503</td>\n      <td>ZGY7WL956RJ516023</td>\n      <td>2024-06-07</td>\n      <td>2025-06-07</td>\n      <td>1233.52</td>\n      <td>250.0</td>\n      <td>75000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PLCY-205899</td>\n      <td>PH-10053</td>\n      <td>4KLW00K34GU905842</td>\n      <td>2023-10-24</td>\n      <td>2024-10-23</td>\n      <td>1188.96</td>\n      <td>250.0</td>\n      <td>100000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>PLCY-503004</td>\n      <td>PH-51346</td>\n      <td>3PRU6FJM2JM866469</td>\n      <td>2023-11-06</td>\n      <td>2024-11-05</td>\n      <td>852.58</td>\n      <td>250.0</td>\n      <td>75000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PLCY-599856</td>\n      <td>PH-54783</td>\n      <td>2NMFZ6LT6RK320517</td>\n      <td>2023-10-06</td>\n      <td>2024-10-05</td>\n      <td>1017.26</td>\n      <td>250.0</td>\n      <td>25000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PLCY-562791</td>\n      <td>PH-39886</td>\n      <td>ZRDL46SB4LF706133</td>\n      <td>2023-12-17</td>\n      <td>2024-12-16</td>\n      <td>1063.60</td>\n      <td>250.0</td>\n      <td>50000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>PLCY-192524</td>\n      <td>PH-83001</td>\n      <td>4AHMDLLR4CB340093</td>\n      <td>2023-12-30</td>\n      <td>2024-12-29</td>\n      <td>1242.62</td>\n      <td>1000.0</td>\n      <td>50000.0</td>\n      <td>Liability</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>PLCY-901441</td>\n      <td>PH-96423</td>\n      <td>2RD942G8XYD262536</td>\n      <td>2024-08-13</td>\n      <td>2025-08-13</td>\n      <td>776.96</td>\n      <td>1000.0</td>\n      <td>25000.0</td>\n      <td>Liability</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>PLCY-620218</td>\n      <td>PH-85707</td>\n      <td>SCL8W03G4JD592597</td>\n      <td>2024-05-07</td>\n      <td>2025-05-07</td>\n      <td>1035.88</td>\n      <td>1000.0</td>\n      <td>75000.0</td>\n      <td>Liability</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>PLCY-630841</td>\n      <td>PH-60293</td>\n      <td>4BAX5HWD6FH046845</td>\n      <td>2024-03-22</td>\n      <td>2025-03-22</td>\n      <td>1374.67</td>\n      <td>1000.0</td>\n      <td>50000.0</td>\n      <td>Liability</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>PLCY-116161</td>\n      <td>PH-84508</td>\n      <td>4CL7Z05W5GK626891</td>\n      <td>2023-11-21</td>\n      <td>2024-11-20</td>\n      <td>1102.18</td>\n      <td>1000.0</td>\n      <td>75000.0</td>\n      <td>Liability</td>\n    </tr>\n  </tbody>\n</table>\n<p>70 rows × 9 columns</p>\n</div>"},"metadata":{}}],"execution_count":31},{"cell_type":"markdown","source":"List of all the tables in DB.","metadata":{}},{"cell_type":"code","source":"# Query 2: List all tables in the dataset\nquery_tables = \"\"\"\nSELECT table_name\nFROM `bqhackathonautoianalysis.autoAnalysis_Dataset.INFORMATION_SCHEMA.TABLES`\nORDER BY table_name\n\"\"\"\ndf_tables = client.query(query_tables).to_dataframe()\nprint(df_tables)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:51:25.908506Z","iopub.execute_input":"2025-09-24T19:51:25.9088Z","iopub.status.idle":"2025-09-24T19:51:27.639889Z","shell.execute_reply.started":"2025-09-24T19:51:25.908778Z","shell.execute_reply":"2025-09-24T19:51:27.638903Z"}},"outputs":[{"name":"stdout","text":"                           table_name\n0                              Claims\n1         Claims_Complete_Predictions\n2              Claims_Master_Features\n3               FINAL_Claims_Complete\n4             FINAL_Executive_Summary\n5                FINAL_Image_Analysis\n6               Image_Claims_Analysis\n7                            Policies\n8                       Policyholders\n9   TEMP_RAW_AI_RESULTS_session7c941b\n10                           Vehicles\n11                       claim_images\n12                   claim_images_raw\n13             image_analysis_results\n14  temp_ai_raw_results_session7c941b\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"from google.cloud import bigquery\nimport pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\n# Initialize BigQuery client\nproject_id = \"bqhackathonautoianalysis\"\nbq_client = bigquery.Client(project=project_id)\n\n# Define table names\ntables = {\n    \"Image Claims\": \"Image_Claims_Analysis\",\n    \"Vehicles\": \"Vehicles\", \n    \"Claims\": \"Claims\",\n    \"Policies\": \"Policies\",\n    \"Policyholders\": \"Policyholders\"\n}\n\ndef clean_dataframe_simple(df):\n    \"\"\"Simple cleaning without fillna - just handle infinities\"\"\"\n    # Replace infinite values with NaN (but don't fill)\n    df.replace([float('inf'), float('-inf')], np.nan, inplace=True)\n    return df\n\n# Alternative: Query with explicit handling in SQL\ndef get_table_with_coalesce(table_name):\n    \"\"\"Get table data with SQL-level null handling\"\"\"\n    full_table = f\"{project_id}.autoAnalysis_Dataset.{table_name}\"\n    \n    # First, get column info\n    info_query = f\"\"\"\n    SELECT column_name, data_type \n    FROM `{project_id}.autoAnalysis_Dataset.INFORMATION_SCHEMA.COLUMNS` \n    WHERE table_name = '{table_name}'\n    \"\"\"\n    \n    try:\n        col_info = bq_client.query(info_query).to_dataframe()\n        \n        # Build select statement with appropriate defaults\n        select_parts = []\n        for _, row in col_info.iterrows():\n            col_name = row['column_name']\n            data_type = row['data_type'].upper()\n            \n            if 'BOOL' in data_type:\n                select_parts.append(f\"COALESCE({col_name}, FALSE) as {col_name}\")\n            elif any(x in data_type for x in ['INT', 'FLOAT', 'NUMERIC']):\n                select_parts.append(f\"COALESCE({col_name}, 0) as {col_name}\")\n            elif 'STRING' in data_type:\n                select_parts.append(f\"COALESCE({col_name}, '') as {col_name}\")\n            else:\n                select_parts.append(col_name)  # Leave as is\n        \n        query = f\"SELECT {', '.join(select_parts)} FROM `{full_table}`\"\n        return bq_client.query(query).to_dataframe()\n        \n    except Exception as e:\n        print(f\"Could not get column info for {table_name}: {e}\")\n        # Fallback to simple query\n        query = f\"SELECT * FROM `{full_table}`\"\n        return bq_client.query(query).to_dataframe()\n\n# Query and display each table\nfor name, table in tables.items():\n    print(f\"\\n=== {name.upper()} ===\")\n    \n    try:\n        # Try the SQL-level approach first\n        df = get_table_with_coalesce(table)\n        \n        # Simple cleaning\n        df = clean_dataframe_simple(df)\n        \n        print(f\"Successfully loaded {name}\")\n        display(df.head())\n        print(f\"Shape: {df.shape}\")\n        print(f\"Data types:\")\n        print(df.dtypes)\n        print(f\"Null values per column:\")\n        print(df.isnull().sum())\n        \n    except Exception as e:\n        print(f\"Error loading {name}: {e}\")\n        \n        # Try simple fallback approach\n        try:\n            full_table = f\"{project_id}.autoAnalysis_Dataset.{table}\"\n            query = f\"SELECT * FROM `{full_table}`\"\n            df = bq_client.query(query).to_dataframe()\n            \n            print(f\"Fallback successful for {name} (with null values)\")\n            display(df.head())\n            print(f\"Shape: {df.shape}\")\n            print(f\"Null values per column:\")\n            print(df.isnull().sum())\n            \n        except Exception as e2:\n            print(f\"Complete failure for {name}: {e2}\")\n            continue","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:51:27.641026Z","iopub.execute_input":"2025-09-24T19:51:27.641299Z","iopub.status.idle":"2025-09-24T19:51:44.565046Z","shell.execute_reply.started":"2025-09-24T19:51:27.641277Z","shell.execute_reply":"2025-09-24T19:51:44.564054Z"}},"outputs":[{"name":"stdout","text":"\n=== IMAGE CLAIMS ===\nSuccessfully loaded Image Claims\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"   image_number claim_id                                          image_uri  \\\n0            32  CL-8032  gs://auto_insurance_analysis/Images_BigQuery/3...   \n1            37  CL-8037  gs://auto_insurance_analysis/Images_BigQuery/3...   \n2            23  CL-8023  gs://auto_insurance_analysis/Images_BigQuery/2...   \n3            30  CL-8030  gs://auto_insurance_analysis/Images_BigQuery/3...   \n4            26  CL-8026  gs://auto_insurance_analysis/Images_BigQuery/2...   \n\n  full_response identified_make identified_model identified_damage_severity  \\\n0       Audi A3            Audi               A3                              \n1     Audi A8 L            Audi             A8 L                              \n2          BMW              BMW                                               \n3  BMW 3 Series             BMW         3 Series                              \n4  BMW 3 Series             BMW         3 Series                              \n\n   confidence_score identified_damage_type  \n0               0.0                         \n1               0.0                         \n2               0.0                         \n3               0.0                         \n4               0.0                         ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>image_number</th>\n      <th>claim_id</th>\n      <th>image_uri</th>\n      <th>full_response</th>\n      <th>identified_make</th>\n      <th>identified_model</th>\n      <th>identified_damage_severity</th>\n      <th>confidence_score</th>\n      <th>identified_damage_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>32</td>\n      <td>CL-8032</td>\n      <td>gs://auto_insurance_analysis/Images_BigQuery/3...</td>\n      <td>Audi A3</td>\n      <td>Audi</td>\n      <td>A3</td>\n      <td></td>\n      <td>0.0</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>37</td>\n      <td>CL-8037</td>\n      <td>gs://auto_insurance_analysis/Images_BigQuery/3...</td>\n      <td>Audi A8 L</td>\n      <td>Audi</td>\n      <td>A8 L</td>\n      <td></td>\n      <td>0.0</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>23</td>\n      <td>CL-8023</td>\n      <td>gs://auto_insurance_analysis/Images_BigQuery/2...</td>\n      <td>BMW</td>\n      <td>BMW</td>\n      <td></td>\n      <td></td>\n      <td>0.0</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>30</td>\n      <td>CL-8030</td>\n      <td>gs://auto_insurance_analysis/Images_BigQuery/3...</td>\n      <td>BMW 3 Series</td>\n      <td>BMW</td>\n      <td>3 Series</td>\n      <td></td>\n      <td>0.0</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>26</td>\n      <td>CL-8026</td>\n      <td>gs://auto_insurance_analysis/Images_BigQuery/2...</td>\n      <td>BMW 3 Series</td>\n      <td>BMW</td>\n      <td>3 Series</td>\n      <td></td>\n      <td>0.0</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"Shape: (70, 9)\nData types:\nimage_number                    Int64\nclaim_id                       object\nimage_uri                      object\nfull_response                  object\nidentified_make                object\nidentified_model               object\nidentified_damage_severity     object\nconfidence_score              float64\nidentified_damage_type         object\ndtype: object\nNull values per column:\nimage_number                  0\nclaim_id                      0\nimage_uri                     0\nfull_response                 0\nidentified_make               0\nidentified_model              0\nidentified_damage_severity    0\nconfidence_score              0\nidentified_damage_type        0\ndtype: int64\n\n=== VEHICLES ===\nSuccessfully loaded Vehicles\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                 vin     make     model  year   color  vehicle_age  \\\n0  KHTJVKES3JV558271      BMW  3 Series  2010   Brown           15   \n1  2NMFZ6LT6RK320517  Renault    Captur  2010    Gray           15   \n2  SCL8W03G4JD592597       SE            2010   Green           15   \n3  NKLAMG0S6SS957555    Skoda       Fab  2010  Silver           15   \n4  KCLVJNJ20GK965793   Toyota      Echo  2010   Brown           15   \n\n  repair_vs_replace_flag  \n0                         \n1                         \n2                         \n3                         \n4                         ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vin</th>\n      <th>make</th>\n      <th>model</th>\n      <th>year</th>\n      <th>color</th>\n      <th>vehicle_age</th>\n      <th>repair_vs_replace_flag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>KHTJVKES3JV558271</td>\n      <td>BMW</td>\n      <td>3 Series</td>\n      <td>2010</td>\n      <td>Brown</td>\n      <td>15</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2NMFZ6LT6RK320517</td>\n      <td>Renault</td>\n      <td>Captur</td>\n      <td>2010</td>\n      <td>Gray</td>\n      <td>15</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SCL8W03G4JD592597</td>\n      <td>SE</td>\n      <td></td>\n      <td>2010</td>\n      <td>Green</td>\n      <td>15</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NKLAMG0S6SS957555</td>\n      <td>Skoda</td>\n      <td>Fab</td>\n      <td>2010</td>\n      <td>Silver</td>\n      <td>15</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>KCLVJNJ20GK965793</td>\n      <td>Toyota</td>\n      <td>Echo</td>\n      <td>2010</td>\n      <td>Brown</td>\n      <td>15</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"Shape: (70, 7)\nData types:\nvin                       object\nmake                      object\nmodel                     object\nyear                       Int64\ncolor                     object\nvehicle_age                Int64\nrepair_vs_replace_flag    object\ndtype: object\nNull values per column:\nvin                       0\nmake                      0\nmodel                     0\nyear                      0\ncolor                     0\nvehicle_age               0\nrepair_vs_replace_flag    0\ndtype: int64\n\n=== CLAIMS ===\nSuccessfully loaded Claims\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  claim_id    policy_id accident_date claim_filed_date         accident_type  \\\n0  CL-8049  PLCY-605794    2025-04-13       2025-04-16  Parking Lot Incident   \n1   CL-804  PLCY-116161    2025-07-24       2025-07-26  Parking Lot Incident   \n2  CL-8080  PLCY-761488    2025-05-12       2025-05-15    Rear-end Collision   \n3   CL-801  PLCY-630841    2025-08-09       2025-08-13    Rear-end Collision   \n4  CL-8062  PLCY-240570    2025-03-24       2025-03-25    Rear-end Collision   \n\n  damage_location weather_condition airbag_deployed drivable_post_accident  \\\n0                             Clear                                          \n1                             Clear                                          \n2                             Clear                                          \n3                             Clear                                          \n4                             Clear                                          \n\n  predicted_damage_severity  predicted_quote                vin  \n0                                        0.0  2GYF59A80FS958948  \n1                                        0.0  4CL7Z05W5GK626891  \n2                                        0.0  1STYXN902KH100728  \n3                                        0.0  4BAX5HWD6FH046845  \n4                                        0.0  NKLAMG0S6SS957555  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>claim_id</th>\n      <th>policy_id</th>\n      <th>accident_date</th>\n      <th>claim_filed_date</th>\n      <th>accident_type</th>\n      <th>damage_location</th>\n      <th>weather_condition</th>\n      <th>airbag_deployed</th>\n      <th>drivable_post_accident</th>\n      <th>predicted_damage_severity</th>\n      <th>predicted_quote</th>\n      <th>vin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CL-8049</td>\n      <td>PLCY-605794</td>\n      <td>2025-04-13</td>\n      <td>2025-04-16</td>\n      <td>Parking Lot Incident</td>\n      <td></td>\n      <td>Clear</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>0.0</td>\n      <td>2GYF59A80FS958948</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CL-804</td>\n      <td>PLCY-116161</td>\n      <td>2025-07-24</td>\n      <td>2025-07-26</td>\n      <td>Parking Lot Incident</td>\n      <td></td>\n      <td>Clear</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>0.0</td>\n      <td>4CL7Z05W5GK626891</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CL-8080</td>\n      <td>PLCY-761488</td>\n      <td>2025-05-12</td>\n      <td>2025-05-15</td>\n      <td>Rear-end Collision</td>\n      <td></td>\n      <td>Clear</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>0.0</td>\n      <td>1STYXN902KH100728</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CL-801</td>\n      <td>PLCY-630841</td>\n      <td>2025-08-09</td>\n      <td>2025-08-13</td>\n      <td>Rear-end Collision</td>\n      <td></td>\n      <td>Clear</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>0.0</td>\n      <td>4BAX5HWD6FH046845</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CL-8062</td>\n      <td>PLCY-240570</td>\n      <td>2025-03-24</td>\n      <td>2025-03-25</td>\n      <td>Rear-end Collision</td>\n      <td></td>\n      <td>Clear</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>0.0</td>\n      <td>NKLAMG0S6SS957555</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"Shape: (70, 12)\nData types:\nclaim_id                      object\npolicy_id                     object\naccident_date                 dbdate\nclaim_filed_date              dbdate\naccident_type                 object\ndamage_location               object\nweather_condition             object\nairbag_deployed               object\ndrivable_post_accident        object\npredicted_damage_severity     object\npredicted_quote              float64\nvin                           object\ndtype: object\nNull values per column:\nclaim_id                     0\npolicy_id                    0\naccident_date                0\nclaim_filed_date             0\naccident_type                0\ndamage_location              0\nweather_condition            0\nairbag_deployed              0\ndrivable_post_accident       0\npredicted_damage_severity    0\npredicted_quote              0\nvin                          0\ndtype: int64\n\n=== POLICIES ===\nSuccessfully loaded Policies\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"     policy_id policyholder_id                vin  start_date    end_date  \\\n0  PLCY-365737        PH-64503  ZGY7WL956RJ516023  2024-06-07  2025-06-07   \n1  PLCY-205899        PH-10053  4KLW00K34GU905842  2023-10-24  2024-10-23   \n2  PLCY-503004        PH-51346  3PRU6FJM2JM866469  2023-11-06  2024-11-05   \n3  PLCY-599856        PH-54783  2NMFZ6LT6RK320517  2023-10-06  2024-10-05   \n4  PLCY-562791        PH-39886  ZRDL46SB4LF706133  2023-12-17  2024-12-16   \n\n   premium_amount  deductible_amount  coverage_limit policy_type  \n0         1233.52              250.0         75000.0   Collision  \n1         1188.96              250.0        100000.0   Collision  \n2          852.58              250.0         75000.0   Collision  \n3         1017.26              250.0         25000.0   Collision  \n4         1063.60              250.0         50000.0   Collision  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>policy_id</th>\n      <th>policyholder_id</th>\n      <th>vin</th>\n      <th>start_date</th>\n      <th>end_date</th>\n      <th>premium_amount</th>\n      <th>deductible_amount</th>\n      <th>coverage_limit</th>\n      <th>policy_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>PLCY-365737</td>\n      <td>PH-64503</td>\n      <td>ZGY7WL956RJ516023</td>\n      <td>2024-06-07</td>\n      <td>2025-06-07</td>\n      <td>1233.52</td>\n      <td>250.0</td>\n      <td>75000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PLCY-205899</td>\n      <td>PH-10053</td>\n      <td>4KLW00K34GU905842</td>\n      <td>2023-10-24</td>\n      <td>2024-10-23</td>\n      <td>1188.96</td>\n      <td>250.0</td>\n      <td>100000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>PLCY-503004</td>\n      <td>PH-51346</td>\n      <td>3PRU6FJM2JM866469</td>\n      <td>2023-11-06</td>\n      <td>2024-11-05</td>\n      <td>852.58</td>\n      <td>250.0</td>\n      <td>75000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PLCY-599856</td>\n      <td>PH-54783</td>\n      <td>2NMFZ6LT6RK320517</td>\n      <td>2023-10-06</td>\n      <td>2024-10-05</td>\n      <td>1017.26</td>\n      <td>250.0</td>\n      <td>25000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PLCY-562791</td>\n      <td>PH-39886</td>\n      <td>ZRDL46SB4LF706133</td>\n      <td>2023-12-17</td>\n      <td>2024-12-16</td>\n      <td>1063.60</td>\n      <td>250.0</td>\n      <td>50000.0</td>\n      <td>Collision</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"Shape: (70, 9)\nData types:\npolicy_id             object\npolicyholder_id       object\nvin                   object\nstart_date            dbdate\nend_date              dbdate\npremium_amount       float64\ndeductible_amount    float64\ncoverage_limit       float64\npolicy_type           object\ndtype: object\nNull values per column:\npolicy_id            0\npolicyholder_id      0\nvin                  0\nstart_date           0\nend_date             0\npremium_amount       0\ndeductible_amount    0\ncoverage_limit       0\npolicy_type          0\ndtype: int64\n\n=== POLICYHOLDERS ===\nSuccessfully loaded Policyholders\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  policyholder_id first_name  last_name                        address  \\\n0        PH-36676    Brandon      Scott        726 Carr Pass Suite 864   \n1        PH-64503     Stacey  Schroeder             6355 Lambert Manor   \n2        PH-33277    Kenneth     Jarvis  14858 Joseph Gardens Apt. 464   \n3        PH-69342     Robert   Delacruz     5972 Butler Oval Suite 522   \n4        PH-10053       Adam      Lopez             100 Melissa Square   \n\n              city state  zip_code signup_date                         email  \\\n0  West Georgestad    AK     30652  2022-08-03     brandon.scott@example.com   \n1        Meyerstad    AL     45774  2023-02-02  stacey.schroeder@example.com   \n2   Port Dawnmouth    AL     90442  2024-03-25    kenneth.jarvis@example.com   \n3    New Johnmouth    AR     41122  2024-05-06   robert.delacruz@example.com   \n4     New Toddfurt    CO     35304  2023-07-31        adam.lopez@example.com   \n\n     phone_number  \n0  (254)-289-7211  \n1  (351)-381-2148  \n2  (969)-837-5516  \n3  (428)-275-2485  \n4  (461)-465-5171  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>policyholder_id</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>address</th>\n      <th>city</th>\n      <th>state</th>\n      <th>zip_code</th>\n      <th>signup_date</th>\n      <th>email</th>\n      <th>phone_number</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>PH-36676</td>\n      <td>Brandon</td>\n      <td>Scott</td>\n      <td>726 Carr Pass Suite 864</td>\n      <td>West Georgestad</td>\n      <td>AK</td>\n      <td>30652</td>\n      <td>2022-08-03</td>\n      <td>brandon.scott@example.com</td>\n      <td>(254)-289-7211</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PH-64503</td>\n      <td>Stacey</td>\n      <td>Schroeder</td>\n      <td>6355 Lambert Manor</td>\n      <td>Meyerstad</td>\n      <td>AL</td>\n      <td>45774</td>\n      <td>2023-02-02</td>\n      <td>stacey.schroeder@example.com</td>\n      <td>(351)-381-2148</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>PH-33277</td>\n      <td>Kenneth</td>\n      <td>Jarvis</td>\n      <td>14858 Joseph Gardens Apt. 464</td>\n      <td>Port Dawnmouth</td>\n      <td>AL</td>\n      <td>90442</td>\n      <td>2024-03-25</td>\n      <td>kenneth.jarvis@example.com</td>\n      <td>(969)-837-5516</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PH-69342</td>\n      <td>Robert</td>\n      <td>Delacruz</td>\n      <td>5972 Butler Oval Suite 522</td>\n      <td>New Johnmouth</td>\n      <td>AR</td>\n      <td>41122</td>\n      <td>2024-05-06</td>\n      <td>robert.delacruz@example.com</td>\n      <td>(428)-275-2485</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PH-10053</td>\n      <td>Adam</td>\n      <td>Lopez</td>\n      <td>100 Melissa Square</td>\n      <td>New Toddfurt</td>\n      <td>CO</td>\n      <td>35304</td>\n      <td>2023-07-31</td>\n      <td>adam.lopez@example.com</td>\n      <td>(461)-465-5171</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"Shape: (70, 10)\nData types:\npolicyholder_id    object\nfirst_name         object\nlast_name          object\naddress            object\ncity               object\nstate              object\nzip_code            Int64\nsignup_date        dbdate\nemail              object\nphone_number       object\ndtype: object\nNull values per column:\npolicyholder_id    0\nfirst_name         0\nlast_name          0\naddress            0\ncity               0\nstate              0\nzip_code           0\nsignup_date        0\nemail              0\nphone_number       0\ndtype: int64\n","output_type":"stream"}],"execution_count":33},{"cell_type":"markdown","source":"Table Overview & Join Keys","metadata":{}},{"cell_type":"code","source":"from google.cloud import bigquery\nimport pandas as pd\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nproject_id = \"bqhackathonautoianalysis\"\nbq_client = bigquery.Client(project=project_id)\n# List of tables and expected join keys\ntables = {\n    \"Claims\": \"Claims\",\n    \"Image_Claims_Analysis\": \"Image_Claims_Analysis\",\n    \"Vehicles\": \"Vehicles\",\n    \"Policies\": \"Policies\",\n    \"Policyholders\": \"Policyholders\"\n}\n\n# Display schema for each table\nfor name, table in tables.items():\n    query = f\"\"\"\n    SELECT column_name, data_type, is_nullable\n    FROM `{project_id}.autoAnalysis_Dataset.INFORMATION_SCHEMA.COLUMNS`\n    WHERE table_name = '{table}'\n    ORDER BY column_name\n    \"\"\"\n    schema_df = bq_client.query(query).to_dataframe()\n    print(f\"\\n=== {name.upper()} SCHEMA ===\")\n    display(schema_df)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:51:44.566254Z","iopub.execute_input":"2025-09-24T19:51:44.566632Z","iopub.status.idle":"2025-09-24T19:51:53.177653Z","shell.execute_reply.started":"2025-09-24T19:51:44.566601Z","shell.execute_reply":"2025-09-24T19:51:53.17652Z"}},"outputs":[{"name":"stdout","text":"\n=== CLAIMS SCHEMA ===\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                  column_name data_type is_nullable\n0               accident_date      DATE         YES\n1               accident_type    STRING         YES\n2             airbag_deployed    STRING         YES\n3            claim_filed_date      DATE         YES\n4                    claim_id    STRING         YES\n5             damage_location    STRING         YES\n6      drivable_post_accident    STRING         YES\n7                   policy_id    STRING         YES\n8   predicted_damage_severity    STRING         YES\n9             predicted_quote   FLOAT64         YES\n10                        vin    STRING         YES\n11          weather_condition    STRING         YES","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column_name</th>\n      <th>data_type</th>\n      <th>is_nullable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>accident_date</td>\n      <td>DATE</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>accident_type</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>airbag_deployed</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>claim_filed_date</td>\n      <td>DATE</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>claim_id</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>damage_location</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>drivable_post_accident</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>policy_id</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>predicted_damage_severity</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>predicted_quote</td>\n      <td>FLOAT64</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>vin</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>weather_condition</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"\n=== IMAGE_CLAIMS_ANALYSIS SCHEMA ===\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                  column_name data_type is_nullable\n0                    claim_id    STRING         YES\n1            confidence_score   FLOAT64         YES\n2               full_response    STRING         YES\n3  identified_damage_severity    STRING         YES\n4      identified_damage_type    STRING         YES\n5             identified_make    STRING         YES\n6            identified_model    STRING         YES\n7                image_number     INT64         YES\n8                   image_uri    STRING         YES","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column_name</th>\n      <th>data_type</th>\n      <th>is_nullable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>claim_id</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>confidence_score</td>\n      <td>FLOAT64</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>full_response</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>identified_damage_severity</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>identified_damage_type</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>identified_make</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>identified_model</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>image_number</td>\n      <td>INT64</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>image_uri</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"\n=== VEHICLES SCHEMA ===\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"              column_name data_type is_nullable\n0                   color    STRING         YES\n1                    make    STRING         YES\n2                   model    STRING         YES\n3  repair_vs_replace_flag    STRING         YES\n4             vehicle_age     INT64         YES\n5                     vin    STRING         YES\n6                    year     INT64         YES","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column_name</th>\n      <th>data_type</th>\n      <th>is_nullable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>color</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>make</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>model</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>repair_vs_replace_flag</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>vehicle_age</td>\n      <td>INT64</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>vin</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>year</td>\n      <td>INT64</td>\n      <td>YES</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"\n=== POLICIES SCHEMA ===\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"         column_name data_type is_nullable\n0     coverage_limit   FLOAT64         YES\n1  deductible_amount   FLOAT64         YES\n2           end_date      DATE         YES\n3          policy_id    STRING         YES\n4        policy_type    STRING         YES\n5    policyholder_id    STRING         YES\n6     premium_amount   FLOAT64         YES\n7         start_date      DATE         YES\n8                vin    STRING         YES","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column_name</th>\n      <th>data_type</th>\n      <th>is_nullable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>coverage_limit</td>\n      <td>FLOAT64</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>deductible_amount</td>\n      <td>FLOAT64</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>end_date</td>\n      <td>DATE</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>policy_id</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>policy_type</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>policyholder_id</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>premium_amount</td>\n      <td>FLOAT64</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>start_date</td>\n      <td>DATE</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>vin</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"\n=== POLICYHOLDERS SCHEMA ===\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"       column_name data_type is_nullable\n0          address    STRING         YES\n1             city    STRING         YES\n2            email    STRING         YES\n3       first_name    STRING         YES\n4        last_name    STRING         YES\n5     phone_number    STRING         YES\n6  policyholder_id    STRING         YES\n7      signup_date      DATE         YES\n8            state    STRING         YES\n9         zip_code     INT64         YES","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column_name</th>\n      <th>data_type</th>\n      <th>is_nullable</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>address</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>city</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>email</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>first_name</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>last_name</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>phone_number</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>policyholder_id</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>signup_date</td>\n      <td>DATE</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>state</td>\n      <td>STRING</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>zip_code</td>\n      <td>INT64</td>\n      <td>YES</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":34},{"cell_type":"markdown","source":"Basic Column Profiling","metadata":{}},{"cell_type":"code","source":"# Load each table into a DataFrame\ndfs = {}\nfor name, table in tables.items():\n    query = f\"SELECT * FROM `{project_id}.autoAnalysis_Dataset.{table}`\"\n    df = bq_client.query(query).to_dataframe()\n    dfs[name] = df\n\n# Profile each table\nfor name, df in dfs.items():\n    print(f\"\\n=== {name.upper()} ===\")\n    display(df.head())\n    print(df.info())\n    print(\"Missing values:\\n\", df.isnull().sum())\n    print(\"Unique values:\\n\", df.nunique())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:51:53.180467Z","iopub.execute_input":"2025-09-24T19:51:53.180774Z","iopub.status.idle":"2025-09-24T19:52:01.033837Z","shell.execute_reply.started":"2025-09-24T19:51:53.180751Z","shell.execute_reply":"2025-09-24T19:52:01.032544Z"}},"outputs":[{"name":"stdout","text":"\n=== CLAIMS ===\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  claim_id    policy_id accident_date claim_filed_date         accident_type  \\\n0  CL-8049  PLCY-605794    2025-04-13       2025-04-16  Parking Lot Incident   \n1   CL-804  PLCY-116161    2025-07-24       2025-07-26  Parking Lot Incident   \n2  CL-8080  PLCY-761488    2025-05-12       2025-05-15    Rear-end Collision   \n3   CL-801  PLCY-630841    2025-08-09       2025-08-13    Rear-end Collision   \n4  CL-8062  PLCY-240570    2025-03-24       2025-03-25    Rear-end Collision   \n\n  damage_location weather_condition airbag_deployed drivable_post_accident  \\\n0            None             Clear            None                   None   \n1            None             Clear            None                   None   \n2            None             Clear            None                   None   \n3            None             Clear            None                   None   \n4            None             Clear            None                   None   \n\n  predicted_damage_severity  predicted_quote                vin  \n0                      None              NaN  2GYF59A80FS958948  \n1                      None              NaN  4CL7Z05W5GK626891  \n2                      None              NaN  1STYXN902KH100728  \n3                      None              NaN  4BAX5HWD6FH046845  \n4                      None              NaN  NKLAMG0S6SS957555  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>claim_id</th>\n      <th>policy_id</th>\n      <th>accident_date</th>\n      <th>claim_filed_date</th>\n      <th>accident_type</th>\n      <th>damage_location</th>\n      <th>weather_condition</th>\n      <th>airbag_deployed</th>\n      <th>drivable_post_accident</th>\n      <th>predicted_damage_severity</th>\n      <th>predicted_quote</th>\n      <th>vin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CL-8049</td>\n      <td>PLCY-605794</td>\n      <td>2025-04-13</td>\n      <td>2025-04-16</td>\n      <td>Parking Lot Incident</td>\n      <td>None</td>\n      <td>Clear</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>2GYF59A80FS958948</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CL-804</td>\n      <td>PLCY-116161</td>\n      <td>2025-07-24</td>\n      <td>2025-07-26</td>\n      <td>Parking Lot Incident</td>\n      <td>None</td>\n      <td>Clear</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>4CL7Z05W5GK626891</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CL-8080</td>\n      <td>PLCY-761488</td>\n      <td>2025-05-12</td>\n      <td>2025-05-15</td>\n      <td>Rear-end Collision</td>\n      <td>None</td>\n      <td>Clear</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>1STYXN902KH100728</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CL-801</td>\n      <td>PLCY-630841</td>\n      <td>2025-08-09</td>\n      <td>2025-08-13</td>\n      <td>Rear-end Collision</td>\n      <td>None</td>\n      <td>Clear</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>4BAX5HWD6FH046845</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CL-8062</td>\n      <td>PLCY-240570</td>\n      <td>2025-03-24</td>\n      <td>2025-03-25</td>\n      <td>Rear-end Collision</td>\n      <td>None</td>\n      <td>Clear</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>NKLAMG0S6SS957555</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 70 entries, 0 to 69\nData columns (total 12 columns):\n #   Column                     Non-Null Count  Dtype  \n---  ------                     --------------  -----  \n 0   claim_id                   70 non-null     object \n 1   policy_id                  70 non-null     object \n 2   accident_date              70 non-null     dbdate \n 3   claim_filed_date           70 non-null     dbdate \n 4   accident_type              70 non-null     object \n 5   damage_location            0 non-null      object \n 6   weather_condition          70 non-null     object \n 7   airbag_deployed            0 non-null      object \n 8   drivable_post_accident     0 non-null      object \n 9   predicted_damage_severity  0 non-null      object \n 10  predicted_quote            0 non-null      float64\n 11  vin                        70 non-null     object \ndtypes: dbdate(2), float64(1), object(9)\nmemory usage: 6.7+ KB\nNone\nMissing values:\n claim_id                      0\npolicy_id                     0\naccident_date                 0\nclaim_filed_date              0\naccident_type                 0\ndamage_location              70\nweather_condition             0\nairbag_deployed              70\ndrivable_post_accident       70\npredicted_damage_severity    70\npredicted_quote              70\nvin                           0\ndtype: int64\nUnique values:\n claim_id                     70\npolicy_id                    70\naccident_date                64\nclaim_filed_date             65\naccident_type                10\ndamage_location               0\nweather_condition            10\nairbag_deployed               0\ndrivable_post_accident        0\npredicted_damage_severity     0\npredicted_quote               0\nvin                          70\ndtype: int64\n\n=== IMAGE_CLAIMS_ANALYSIS ===\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"   image_number claim_id                                          image_uri  \\\n0            32  CL-8032  gs://auto_insurance_analysis/Images_BigQuery/3...   \n1            37  CL-8037  gs://auto_insurance_analysis/Images_BigQuery/3...   \n2            23  CL-8023  gs://auto_insurance_analysis/Images_BigQuery/2...   \n3            30  CL-8030  gs://auto_insurance_analysis/Images_BigQuery/3...   \n4            26  CL-8026  gs://auto_insurance_analysis/Images_BigQuery/2...   \n\n  full_response identified_make identified_model identified_damage_severity  \\\n0       Audi A3            Audi               A3                       None   \n1     Audi A8 L            Audi             A8 L                       None   \n2          BMW              BMW                                        None   \n3  BMW 3 Series             BMW         3 Series                       None   \n4  BMW 3 Series             BMW         3 Series                       None   \n\n   confidence_score identified_damage_type  \n0               NaN                   None  \n1               NaN                   None  \n2               NaN                   None  \n3               NaN                   None  \n4               NaN                   None  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>image_number</th>\n      <th>claim_id</th>\n      <th>image_uri</th>\n      <th>full_response</th>\n      <th>identified_make</th>\n      <th>identified_model</th>\n      <th>identified_damage_severity</th>\n      <th>confidence_score</th>\n      <th>identified_damage_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>32</td>\n      <td>CL-8032</td>\n      <td>gs://auto_insurance_analysis/Images_BigQuery/3...</td>\n      <td>Audi A3</td>\n      <td>Audi</td>\n      <td>A3</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>37</td>\n      <td>CL-8037</td>\n      <td>gs://auto_insurance_analysis/Images_BigQuery/3...</td>\n      <td>Audi A8 L</td>\n      <td>Audi</td>\n      <td>A8 L</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>23</td>\n      <td>CL-8023</td>\n      <td>gs://auto_insurance_analysis/Images_BigQuery/2...</td>\n      <td>BMW</td>\n      <td>BMW</td>\n      <td></td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>30</td>\n      <td>CL-8030</td>\n      <td>gs://auto_insurance_analysis/Images_BigQuery/3...</td>\n      <td>BMW 3 Series</td>\n      <td>BMW</td>\n      <td>3 Series</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>26</td>\n      <td>CL-8026</td>\n      <td>gs://auto_insurance_analysis/Images_BigQuery/2...</td>\n      <td>BMW 3 Series</td>\n      <td>BMW</td>\n      <td>3 Series</td>\n      <td>None</td>\n      <td>NaN</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 70 entries, 0 to 69\nData columns (total 9 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   image_number                70 non-null     Int64  \n 1   claim_id                    70 non-null     object \n 2   image_uri                   70 non-null     object \n 3   full_response               68 non-null     object \n 4   identified_make             70 non-null     object \n 5   identified_model            70 non-null     object \n 6   identified_damage_severity  0 non-null      object \n 7   confidence_score            0 non-null      float64\n 8   identified_damage_type      0 non-null      object \ndtypes: Int64(1), float64(1), object(7)\nmemory usage: 5.1+ KB\nNone\nMissing values:\n image_number                   0\nclaim_id                       0\nimage_uri                      0\nfull_response                  2\nidentified_make                0\nidentified_model               0\nidentified_damage_severity    70\nconfidence_score              70\nidentified_damage_type        70\ndtype: int64\nUnique values:\n image_number                  70\nclaim_id                      70\nimage_uri                     70\nfull_response                 46\nidentified_make               26\nidentified_model              43\nidentified_damage_severity     0\nconfidence_score               0\nidentified_damage_type         0\ndtype: int64\n\n=== VEHICLES ===\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                 vin     make     model  year   color  vehicle_age  \\\n0  KHTJVKES3JV558271      BMW  3 Series  2010   Brown           15   \n1  2NMFZ6LT6RK320517  Renault    Captur  2010    Gray           15   \n2  SCL8W03G4JD592597       SE      None  2010   Green           15   \n3  NKLAMG0S6SS957555    Skoda       Fab  2010  Silver           15   \n4  KCLVJNJ20GK965793   Toyota      Echo  2010   Brown           15   \n\n  repair_vs_replace_flag  \n0                   None  \n1                   None  \n2                   None  \n3                   None  \n4                   None  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vin</th>\n      <th>make</th>\n      <th>model</th>\n      <th>year</th>\n      <th>color</th>\n      <th>vehicle_age</th>\n      <th>repair_vs_replace_flag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>KHTJVKES3JV558271</td>\n      <td>BMW</td>\n      <td>3 Series</td>\n      <td>2010</td>\n      <td>Brown</td>\n      <td>15</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2NMFZ6LT6RK320517</td>\n      <td>Renault</td>\n      <td>Captur</td>\n      <td>2010</td>\n      <td>Gray</td>\n      <td>15</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SCL8W03G4JD592597</td>\n      <td>SE</td>\n      <td>None</td>\n      <td>2010</td>\n      <td>Green</td>\n      <td>15</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NKLAMG0S6SS957555</td>\n      <td>Skoda</td>\n      <td>Fab</td>\n      <td>2010</td>\n      <td>Silver</td>\n      <td>15</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>KCLVJNJ20GK965793</td>\n      <td>Toyota</td>\n      <td>Echo</td>\n      <td>2010</td>\n      <td>Brown</td>\n      <td>15</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 70 entries, 0 to 69\nData columns (total 7 columns):\n #   Column                  Non-Null Count  Dtype \n---  ------                  --------------  ----- \n 0   vin                     70 non-null     object\n 1   make                    70 non-null     object\n 2   model                   61 non-null     object\n 3   year                    70 non-null     Int64 \n 4   color                   70 non-null     object\n 5   vehicle_age             70 non-null     Int64 \n 6   repair_vs_replace_flag  0 non-null      object\ndtypes: Int64(2), object(5)\nmemory usage: 4.1+ KB\nNone\nMissing values:\n vin                        0\nmake                       0\nmodel                      9\nyear                       0\ncolor                      0\nvehicle_age                0\nrepair_vs_replace_flag    70\ndtype: int64\nUnique values:\n vin                       70\nmake                      26\nmodel                     42\nyear                      14\ncolor                      8\nvehicle_age               14\nrepair_vs_replace_flag     0\ndtype: int64\n\n=== POLICIES ===\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"     policy_id policyholder_id                vin  start_date    end_date  \\\n0  PLCY-365737        PH-64503  ZGY7WL956RJ516023  2024-06-07  2025-06-07   \n1  PLCY-205899        PH-10053  4KLW00K34GU905842  2023-10-24  2024-10-23   \n2  PLCY-503004        PH-51346  3PRU6FJM2JM866469  2023-11-06  2024-11-05   \n3  PLCY-599856        PH-54783  2NMFZ6LT6RK320517  2023-10-06  2024-10-05   \n4  PLCY-562791        PH-39886  ZRDL46SB4LF706133  2023-12-17  2024-12-16   \n\n   premium_amount  deductible_amount  coverage_limit policy_type  \n0         1233.52              250.0         75000.0   Collision  \n1         1188.96              250.0        100000.0   Collision  \n2          852.58              250.0         75000.0   Collision  \n3         1017.26              250.0         25000.0   Collision  \n4         1063.60              250.0         50000.0   Collision  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>policy_id</th>\n      <th>policyholder_id</th>\n      <th>vin</th>\n      <th>start_date</th>\n      <th>end_date</th>\n      <th>premium_amount</th>\n      <th>deductible_amount</th>\n      <th>coverage_limit</th>\n      <th>policy_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>PLCY-365737</td>\n      <td>PH-64503</td>\n      <td>ZGY7WL956RJ516023</td>\n      <td>2024-06-07</td>\n      <td>2025-06-07</td>\n      <td>1233.52</td>\n      <td>250.0</td>\n      <td>75000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PLCY-205899</td>\n      <td>PH-10053</td>\n      <td>4KLW00K34GU905842</td>\n      <td>2023-10-24</td>\n      <td>2024-10-23</td>\n      <td>1188.96</td>\n      <td>250.0</td>\n      <td>100000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>PLCY-503004</td>\n      <td>PH-51346</td>\n      <td>3PRU6FJM2JM866469</td>\n      <td>2023-11-06</td>\n      <td>2024-11-05</td>\n      <td>852.58</td>\n      <td>250.0</td>\n      <td>75000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PLCY-599856</td>\n      <td>PH-54783</td>\n      <td>2NMFZ6LT6RK320517</td>\n      <td>2023-10-06</td>\n      <td>2024-10-05</td>\n      <td>1017.26</td>\n      <td>250.0</td>\n      <td>25000.0</td>\n      <td>Collision</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PLCY-562791</td>\n      <td>PH-39886</td>\n      <td>ZRDL46SB4LF706133</td>\n      <td>2023-12-17</td>\n      <td>2024-12-16</td>\n      <td>1063.60</td>\n      <td>250.0</td>\n      <td>50000.0</td>\n      <td>Collision</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 70 entries, 0 to 69\nData columns (total 9 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   policy_id          70 non-null     object \n 1   policyholder_id    70 non-null     object \n 2   vin                70 non-null     object \n 3   start_date         70 non-null     dbdate \n 4   end_date           70 non-null     dbdate \n 5   premium_amount     70 non-null     float64\n 6   deductible_amount  70 non-null     float64\n 7   coverage_limit     70 non-null     float64\n 8   policy_type        70 non-null     object \ndtypes: dbdate(2), float64(3), object(4)\nmemory usage: 5.1+ KB\nNone\nMissing values:\n policy_id            0\npolicyholder_id      0\nvin                  0\nstart_date           0\nend_date             0\npremium_amount       0\ndeductible_amount    0\ncoverage_limit       0\npolicy_type          0\ndtype: int64\nUnique values:\n policy_id            70\npolicyholder_id      70\nvin                  70\nstart_date           65\nend_date             65\npremium_amount       70\ndeductible_amount     4\ncoverage_limit        4\npolicy_type           3\ndtype: int64\n\n=== POLICYHOLDERS ===\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  policyholder_id first_name  last_name                        address  \\\n0        PH-36676    Brandon      Scott        726 Carr Pass Suite 864   \n1        PH-64503     Stacey  Schroeder             6355 Lambert Manor   \n2        PH-33277    Kenneth     Jarvis  14858 Joseph Gardens Apt. 464   \n3        PH-69342     Robert   Delacruz     5972 Butler Oval Suite 522   \n4        PH-10053       Adam      Lopez             100 Melissa Square   \n\n              city state  zip_code signup_date                         email  \\\n0  West Georgestad    AK     30652  2022-08-03     brandon.scott@example.com   \n1        Meyerstad    AL     45774  2023-02-02  stacey.schroeder@example.com   \n2   Port Dawnmouth    AL     90442  2024-03-25    kenneth.jarvis@example.com   \n3    New Johnmouth    AR     41122  2024-05-06   robert.delacruz@example.com   \n4     New Toddfurt    CO     35304  2023-07-31        adam.lopez@example.com   \n\n     phone_number  \n0  (254)-289-7211  \n1  (351)-381-2148  \n2  (969)-837-5516  \n3  (428)-275-2485  \n4  (461)-465-5171  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>policyholder_id</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>address</th>\n      <th>city</th>\n      <th>state</th>\n      <th>zip_code</th>\n      <th>signup_date</th>\n      <th>email</th>\n      <th>phone_number</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>PH-36676</td>\n      <td>Brandon</td>\n      <td>Scott</td>\n      <td>726 Carr Pass Suite 864</td>\n      <td>West Georgestad</td>\n      <td>AK</td>\n      <td>30652</td>\n      <td>2022-08-03</td>\n      <td>brandon.scott@example.com</td>\n      <td>(254)-289-7211</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PH-64503</td>\n      <td>Stacey</td>\n      <td>Schroeder</td>\n      <td>6355 Lambert Manor</td>\n      <td>Meyerstad</td>\n      <td>AL</td>\n      <td>45774</td>\n      <td>2023-02-02</td>\n      <td>stacey.schroeder@example.com</td>\n      <td>(351)-381-2148</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>PH-33277</td>\n      <td>Kenneth</td>\n      <td>Jarvis</td>\n      <td>14858 Joseph Gardens Apt. 464</td>\n      <td>Port Dawnmouth</td>\n      <td>AL</td>\n      <td>90442</td>\n      <td>2024-03-25</td>\n      <td>kenneth.jarvis@example.com</td>\n      <td>(969)-837-5516</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PH-69342</td>\n      <td>Robert</td>\n      <td>Delacruz</td>\n      <td>5972 Butler Oval Suite 522</td>\n      <td>New Johnmouth</td>\n      <td>AR</td>\n      <td>41122</td>\n      <td>2024-05-06</td>\n      <td>robert.delacruz@example.com</td>\n      <td>(428)-275-2485</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PH-10053</td>\n      <td>Adam</td>\n      <td>Lopez</td>\n      <td>100 Melissa Square</td>\n      <td>New Toddfurt</td>\n      <td>CO</td>\n      <td>35304</td>\n      <td>2023-07-31</td>\n      <td>adam.lopez@example.com</td>\n      <td>(461)-465-5171</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 70 entries, 0 to 69\nData columns (total 10 columns):\n #   Column           Non-Null Count  Dtype \n---  ------           --------------  ----- \n 0   policyholder_id  70 non-null     object\n 1   first_name       70 non-null     object\n 2   last_name        70 non-null     object\n 3   address          70 non-null     object\n 4   city             70 non-null     object\n 5   state            70 non-null     object\n 6   zip_code         70 non-null     Int64 \n 7   signup_date      70 non-null     dbdate\n 8   email            70 non-null     object\n 9   phone_number     70 non-null     object\ndtypes: Int64(1), dbdate(1), object(8)\nmemory usage: 5.7+ KB\nNone\nMissing values:\n policyholder_id    0\nfirst_name         0\nlast_name          0\naddress            0\ncity               0\nstate              0\nzip_code           0\nsignup_date        0\nemail              0\nphone_number       0\ndtype: int64\nUnique values:\n policyholder_id    70\nfirst_name         56\nlast_name          61\naddress            70\ncity               69\nstate              40\nzip_code           70\nsignup_date        68\nemail              70\nphone_number       70\ndtype: int64\n","output_type":"stream"}],"execution_count":35},{"cell_type":"markdown","source":"Distribution Analysis","metadata":{}},{"cell_type":"code","source":"# ==============================================================================\n# --- Distribution Analysis (Presentation Ready) ---\n# This cell provides a polished visual analysis of key data distributions\n# for the final submission notebook.\n# ==============================================================================\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Set a professional plot style for all subsequent charts in the notebook\nsns.set_theme(style=\"whitegrid\", palette=\"viridis\")\n\n# --- Analysis 1: Accident Type Distribution ---\n\n# Get the data and prepare it for display\ndf_claims = dfs[\"Claims\"]\naccident_counts = df_claims[\"accident_type\"].value_counts()\n\n# -- Output 1.1: Beautified Table --\nprint(\"Accident Type Distribution (Table View)\")\ndisplay(accident_counts.to_frame(name=\"Number of Claims\").style\n    .set_caption(\"Frequency of Each Accident Type\")\n    .set_table_styles([\n        {'selector': 'th', 'props': [('background-color', '#440154'), ('color', 'white'), ('font-weight', 'bold')]},\n        {'selector': 'caption', 'props': [('color', '#440154'), ('font-size', '1.1em'), ('font-weight', 'bold')]}\n    ])\n    .bar(color='#40B7AD', vmin=0)\n)\n\n# -- Output 1.2: Beautified Bar Chart --\nplt.figure(figsize=(12, 8))\nax = sns.countplot(\n    data=df_claims,\n    y='accident_type',\n    order=accident_counts.index  # Sort bars from most to least frequent\n)\n\n# Add clear data labels to the end of each bar\nax.bar_label(ax.containers[0], padding=5, fontsize=11, fontweight='bold')\n\n# Set well-defined titles and labels\nax.set_title('Distribution of Accident Types', fontsize=16, fontweight='bold')\nax.set_xlabel('Number of Claims', fontsize=12)\nax.set_ylabel('Accident Type', fontsize=12)\nax.set_xlim(right=accident_counts.max() * 1.15) # Add padding for labels\n\nprint(\"\\n\\nAccident Type Distribution (Chart View)\")\nplt.tight_layout()\nplt.show()\n\n\n# --- Analysis 2: Vehicle Age Distribution ---\n\n# Get the data\ndf_vehicles = dfs[\"Vehicles\"]\n\n# -- Output 2.1: Beautified Histogram --\nplt.figure(figsize=(10, 6))\nax = sns.histplot(\n    data=df_vehicles,\n    x='vehicle_age',\n    bins=25,          # Adjusted for better granularity\n    kde=True,         # Adds a smooth density curve\n    color=\"#21918c\"\n)\n\n# Add a vertical line for the mean age for context\nmean_age = df_vehicles['vehicle_age'].mean()\nax.axvline(mean_age, color='#fde725', linestyle='--', linewidth=2.5, label=f'Mean Age: {mean_age:.1f} years')\n\n# Set well-defined titles and labels\nax.set_title('Distribution of Vehicle Ages', fontsize=16, fontweight='bold')\nax.set_xlabel('Vehicle Age (Years)', fontsize=12)\nax.set_ylabel('Frequency (Number of Vehicles)', fontsize=12)\nax.legend() # Display the label for the mean line\n\nprint(\"\\n\\nVehicle Age Distribution\")\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:52:01.034916Z","iopub.execute_input":"2025-09-24T19:52:01.035214Z","iopub.status.idle":"2025-09-24T19:52:01.847051Z","shell.execute_reply.started":"2025-09-24T19:52:01.035183Z","shell.execute_reply":"2025-09-24T19:52:01.845945Z"}},"outputs":[{"name":"stdout","text":"Accident Type Distribution (Table View)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x78e35dcb0e50>","text/html":"<style type=\"text/css\">\n#T_15f82 th {\n  background-color: #440154;\n  color: white;\n  font-weight: bold;\n}\n#T_15f82 caption {\n  color: #440154;\n  font-size: 1.1em;\n  font-weight: bold;\n}\n#T_15f82_row0_col0 {\n  width: 10em;\n  background: linear-gradient(90deg, #40B7AD 100.0%, transparent 100.0%);\n}\n#T_15f82_row1_col0, #T_15f82_row2_col0, #T_15f82_row3_col0, #T_15f82_row4_col0 {\n  width: 10em;\n  background: linear-gradient(90deg, #40B7AD 88.9%, transparent 88.9%);\n}\n#T_15f82_row5_col0, #T_15f82_row6_col0, #T_15f82_row7_col0 {\n  width: 10em;\n  background: linear-gradient(90deg, #40B7AD 77.8%, transparent 77.8%);\n}\n#T_15f82_row8_col0 {\n  width: 10em;\n  background: linear-gradient(90deg, #40B7AD 55.6%, transparent 55.6%);\n}\n#T_15f82_row9_col0 {\n  width: 10em;\n  background: linear-gradient(90deg, #40B7AD 33.3%, transparent 33.3%);\n}\n</style>\n<table id=\"T_15f82\">\n  <caption>Frequency of Each Accident Type</caption>\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_15f82_level0_col0\" class=\"col_heading level0 col0\" >Number of Claims</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >accident_type</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_15f82_level0_row0\" class=\"row_heading level0 row0\" >Vehicle Fire</th>\n      <td id=\"T_15f82_row0_col0\" class=\"data row0 col0\" >9</td>\n    </tr>\n    <tr>\n      <th id=\"T_15f82_level0_row1\" class=\"row_heading level0 row1\" >Rear-end Collision</th>\n      <td id=\"T_15f82_row1_col0\" class=\"data row1 col0\" >8</td>\n    </tr>\n    <tr>\n      <th id=\"T_15f82_level0_row2\" class=\"row_heading level0 row2\" >Rollover</th>\n      <td id=\"T_15f82_row2_col0\" class=\"data row2 col0\" >8</td>\n    </tr>\n    <tr>\n      <th id=\"T_15f82_level0_row3\" class=\"row_heading level0 row3\" >Side-impact Collision</th>\n      <td id=\"T_15f82_row3_col0\" class=\"data row3 col0\" >8</td>\n    </tr>\n    <tr>\n      <th id=\"T_15f82_level0_row4\" class=\"row_heading level0 row4\" >Single Vehicle Accident</th>\n      <td id=\"T_15f82_row4_col0\" class=\"data row4 col0\" >8</td>\n    </tr>\n    <tr>\n      <th id=\"T_15f82_level0_row5\" class=\"row_heading level0 row5\" >Parking Lot Incident</th>\n      <td id=\"T_15f82_row5_col0\" class=\"data row5 col0\" >7</td>\n    </tr>\n    <tr>\n      <th id=\"T_15f82_level0_row6\" class=\"row_heading level0 row6\" >Theft</th>\n      <td id=\"T_15f82_row6_col0\" class=\"data row6 col0\" >7</td>\n    </tr>\n    <tr>\n      <th id=\"T_15f82_level0_row7\" class=\"row_heading level0 row7\" >Vandalism</th>\n      <td id=\"T_15f82_row7_col0\" class=\"data row7 col0\" >7</td>\n    </tr>\n    <tr>\n      <th id=\"T_15f82_level0_row8\" class=\"row_heading level0 row8\" >Natural Disaster</th>\n      <td id=\"T_15f82_row8_col0\" class=\"data row8 col0\" >5</td>\n    </tr>\n    <tr>\n      <th id=\"T_15f82_level0_row9\" class=\"row_heading level0 row9\" >Head-on Collision</th>\n      <td id=\"T_15f82_row9_col0\" class=\"data row9 col0\" >3</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}},{"name":"stdout","text":"\n\nAccident Type Distribution (Chart View)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n\nVehicle Age Distribution\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":36},{"cell_type":"markdown","source":"Join Coverage","metadata":{}},{"cell_type":"code","source":"# Reload Claims table to get the updated schema with vin column\nquery = \"SELECT * FROM `bqhackathonautoianalysis.autoAnalysis_Dataset.Claims`\"\ndf_claims = client.query(query).to_dataframe()\n\n# Verify the vin column is now available\nprint(\"Updated Claims table columns:\")\nprint(df_claims.columns.tolist())\n\n# Check if vin column exists\nif 'vin' in df_claims.columns:\n    print(\"✅ vin column now exists in Claims DataFrame\")\n    print(\"Sample vin values:\", df_claims['vin'].head())\nelse:\n    print(\"❌ vin column still missing\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:52:01.848507Z","iopub.execute_input":"2025-09-24T19:52:01.848861Z","iopub.status.idle":"2025-09-24T19:52:03.4636Z","shell.execute_reply.started":"2025-09-24T19:52:01.84883Z","shell.execute_reply":"2025-09-24T19:52:03.462605Z"}},"outputs":[{"name":"stdout","text":"Updated Claims table columns:\n['claim_id', 'policy_id', 'accident_date', 'claim_filed_date', 'accident_type', 'damage_location', 'weather_condition', 'airbag_deployed', 'drivable_post_accident', 'predicted_damage_severity', 'predicted_quote', 'vin']\n✅ vin column now exists in Claims DataFrame\nSample vin values: 0    2GYF59A80FS958948\n1    4CL7Z05W5GK626891\n2    1STYXN902KH100728\n3    4BAX5HWD6FH046845\n4    NKLAMG0S6SS957555\nName: vin, dtype: object\n","output_type":"stream"}],"execution_count":37},{"cell_type":"code","source":"# Join Claims with Image_Claims_Analysis\nclaims_images = pd.merge(df_claims, dfs[\"Image_Claims_Analysis\"], on=\"claim_id\", how=\"left\")\nprint(\"Claims with image data:\", claims_images[\"image_uri\"].notnull().sum())\n\n# Join Claims with Policies and Vehicles\n# Method 1: Use left_on and right_on for explicit column mapping\n# Method 1: Use suffixes to handle conflicts\nclaims_policies = pd.merge(\n    df_claims, \n    dfs[\"Policies\"], \n    on=[\"policy_id\", \"vin\"], \n    how=\"left\"\n)\nprint(\"After merge with suffixes:\", claims_policies.columns.tolist())\n\n# Now try the second merge\nclaims_full = pd.merge(\n    claims_policies, \n    dfs[\"Vehicles\"], \n    on=\"vin\", \n    how=\"left\"\n)\nprint(\"Final columns:\", claims_full.columns.tolist())\nprint(\"Claims with full policy and vehicle info:\", claims_full.dropna(subset=[\"vin\", \"policyholder_id\"]).shape[0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:52:03.464769Z","iopub.execute_input":"2025-09-24T19:52:03.465102Z","iopub.status.idle":"2025-09-24T19:52:03.486779Z","shell.execute_reply.started":"2025-09-24T19:52:03.465072Z","shell.execute_reply":"2025-09-24T19:52:03.485766Z"}},"outputs":[{"name":"stdout","text":"Claims with image data: 70\nAfter merge with suffixes: ['claim_id', 'policy_id', 'accident_date', 'claim_filed_date', 'accident_type', 'damage_location', 'weather_condition', 'airbag_deployed', 'drivable_post_accident', 'predicted_damage_severity', 'predicted_quote', 'vin', 'policyholder_id', 'start_date', 'end_date', 'premium_amount', 'deductible_amount', 'coverage_limit', 'policy_type']\nFinal columns: ['claim_id', 'policy_id', 'accident_date', 'claim_filed_date', 'accident_type', 'damage_location', 'weather_condition', 'airbag_deployed', 'drivable_post_accident', 'predicted_damage_severity', 'predicted_quote', 'vin', 'policyholder_id', 'start_date', 'end_date', 'premium_amount', 'deductible_amount', 'coverage_limit', 'policy_type', 'make', 'model', 'year', 'color', 'vehicle_age', 'repair_vs_replace_flag']\nClaims with full policy and vehicle info: 70\n","output_type":"stream"}],"execution_count":38},{"cell_type":"markdown","source":"Target Column Audit","metadata":{}},{"cell_type":"code","source":"target_cols = [\n    \"airbag_deployed\",\n    \"drivable_post_accident\",\n    \"predicted_damage_severity\",\n    \"predicted_quote\",\n    \"damage_location\"\n]\n\nprint(\"\\nTarget Column Missingness:\")\nprint(df_claims[target_cols].isnull().sum())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:52:03.487775Z","iopub.execute_input":"2025-09-24T19:52:03.488024Z","iopub.status.idle":"2025-09-24T19:52:03.509588Z","shell.execute_reply.started":"2025-09-24T19:52:03.487998Z","shell.execute_reply":"2025-09-24T19:52:03.508177Z"}},"outputs":[{"name":"stdout","text":"\nTarget Column Missingness:\nairbag_deployed              70\ndrivable_post_accident       70\npredicted_damage_severity    70\npredicted_quote              70\ndamage_location              70\ndtype: int64\n","output_type":"stream"}],"execution_count":39},{"cell_type":"markdown","source":"Image Feature Profiling","metadata":{}},{"cell_type":"code","source":"df_images = dfs[\"Image_Claims_Analysis\"]\nprint(\"\\nIdentified Make Distribution:\")\ndisplay(df_images[\"identified_make\"].value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:52:03.510556Z","iopub.execute_input":"2025-09-24T19:52:03.510873Z","iopub.status.idle":"2025-09-24T19:52:03.533912Z","shell.execute_reply.started":"2025-09-24T19:52:03.510852Z","shell.execute_reply":"2025-09-24T19:52:03.532917Z"}},"outputs":[{"name":"stdout","text":"\nIdentified Make Distribution:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"identified_make\nVolkswagen       10\nToyota           10\nBMW               6\nFord              5\nChevrolet         3\nHonda             3\nPeugeot           3\nOpel              3\nSaturn            2\nSEAT              2\nRenault           2\nAudi              2\nMazda             2\nKia               2\nHyundai           2\nCitroën           2\nNissan            2\nMitsubishi        1\nMercedes-Benz     1\nLexus             1\nPorsche           1\nProton            1\nLancia            1\nSE                1\nSkoda             1\nSuzuki            1\nName: count, dtype: int64"},"metadata":{}}],"execution_count":40},{"cell_type":"markdown","source":"Feature Engineering Readiness","metadata":{}},{"cell_type":"code","source":"# Derived features\ndf_claims[\"claim_delay\"] = pd.to_datetime(df_claims[\"claim_filed_date\"]) - pd.to_datetime(df_claims[\"accident_date\"])\ndf_policies = dfs[\"Policies\"]\ndf_policies[\"policy_duration\"] = pd.to_datetime(df_policies[\"end_date\"]) - pd.to_datetime(df_policies[\"start_date\"])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:52:03.534832Z","iopub.execute_input":"2025-09-24T19:52:03.535173Z","iopub.status.idle":"2025-09-24T19:52:03.559611Z","shell.execute_reply.started":"2025-09-24T19:52:03.535144Z","shell.execute_reply":"2025-09-24T19:52:03.558516Z"}},"outputs":[],"execution_count":41},{"cell_type":"markdown","source":"Implementation of Approach 1: The AI Architect ( Using, Generative AI in BigFrames (Python):\nbigframes.ml.llm.GeminiTextGenerator: Leverage the power of Gemini models in your Python workflows.\n","metadata":{}},{"cell_type":"markdown","source":"Please ensure you specify a project id when creating the client in order to use your BigQuery account.\nTotal rows in Claims table: 70","metadata":{}},{"cell_type":"markdown","source":"Phase 1: BigFrame Data Preprocessing","metadata":{}},{"cell_type":"code","source":"# Use BigFrames instead of creating intermediate tables\nimport bigframes.pandas as bf\n\n# Load all data into BigFrames\nclaims = bf.read_gbq(\"bqhackathonautoianalysis.autoAnalysis_Dataset.Claims\")\nimages = bf.read_gbq(\"bqhackathonautoianalysis.autoAnalysis_Dataset.Image_Claims_Analysis\")\nvehicles = bf.read_gbq(\"bqhackathonautoianalysis.autoAnalysis_Dataset.Vehicles\")\n\n# Join without creating tables\nmaster_df = claims.merge(images, on=\"claim_id\").merge(vehicles, on=\"vin\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:52:03.560764Z","iopub.execute_input":"2025-09-24T19:52:03.561169Z","iopub.status.idle":"2025-09-24T19:52:07.078858Z","shell.execute_reply.started":"2025-09-24T19:52:03.561141Z","shell.execute_reply":"2025-09-24T19:52:07.07784Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 0f7c7616-37ca-44d6-832e-205f09e64e73 is DONE. 0 Bytes processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:0f7c7616-37ca-44d6-832e-205f09e64e73&page=queryresults\">Open Job</a>"},"metadata":{}}],"execution_count":42},{"cell_type":"markdown","source":"Analyzing Severity of Damage and Part of Car Impacted by Damage","metadata":{}},{"cell_type":"code","source":"import bigframes.pandas as bf\nfrom bigframes.ml.llm import GeminiTextGenerator\n\n# ==============================================================================\n# --- Session Management (CRITICAL FIX) ---\n# ==============================================================================\n# Close any previously active session to allow settings to be changed.\n# This makes the entire cell re-runnable.\ntry:\n    bf.close_session()\nexcept Exception:\n    pass # Fails silently if no session is active, which is fine.\n\n# Now, set the project for the new session. This is the correct way.\nbf.options.bigquery.project = \"bqhackathonautoianalysis\"\n\n# bf.options.bigquery.project = \"bqhackathonautoianalysis\"\n\n# 1. Load the raw images table\nraw_images = bf.read_gbq(\"bqhackathonautoianalysis.autoAnalysis_Dataset.claim_images_raw\")\n\n# 2. Create analysis prompt\nraw_images[\"analysis_prompt\"] = (\n    \"You are an AI claims inspector. Analyze the given vehicle accident image. \"\n    \"Return structured text with:\\n\"\n    \"Full response: <your description>\\n\"\n    \"Damage type: <scratch/dent/etc>\\n\"\n    \"Damage severity: <low/medium/high>\\n\"\n    \"Confidence score: <0-100>\\n\\n\"\n    \"Image URI: \" + raw_images[\"uri\"]\n)\n\n# 3. Run Gemini model safely\ngenerator = GeminiTextGenerator()\n\n# 👇 This gives a new DataFrame with multiple cols, not a Series\nai_output = generator.predict(raw_images[\"analysis_prompt\"])\n\n# 4. Inspect what Gemini returned\nprint(ai_output.head())   # check columns\n\n# 5. Assume the text is in 'ml_generate_text_result' column\nraw_images[\"final_response\"] = ai_output[\"ml_generate_text_llm_result\"]\n\n# 6. Extract structured fields from final_response\n# Instead of .apply(lambda x: f\"Extract the damage type from this text: {x}\")\nraw_images[\"damage_type_prompt\"] = \"Extract the damage type from this text: \" + raw_images[\"final_response\"]\nraw_images[\"damage_severity_prompt\"] = \"Extract the damage severity from this text: \" + raw_images[\"final_response\"]\nraw_images[\"confidence_prompt\"] = \"Provide a confidence score (0-1) for this analysis: \" + raw_images[\"final_response\"]\n\n# Now pass these directly into Gemini\nextractor = GeminiTextGenerator()\n# Run Gemini and select only the text output\ndamage_type_output = extractor.predict(raw_images[\"damage_type_prompt\"])\nraw_images[\"identified_damage_type\"] = damage_type_output[\"ml_generate_text_llm_result\"]\n\nseverity_output = extractor.predict(raw_images[\"damage_severity_prompt\"])\nraw_images[\"identified_damage_severity\"] = severity_output[\"ml_generate_text_llm_result\"]\n\nconfidence_output = extractor.predict(raw_images[\"confidence_prompt\"])\nraw_images[\"confidence_score\"] = confidence_output[\"ml_generate_text_llm_result\"]\n\nprint(\"--- Starting Enrichment: Adding Vehicle Make and Model ---\")\n\n# 11. Load the Image_Claims_Analysis table\n# We only need the key ('image_uri') and the data we want to add.\n# This is more efficient than loading the whole table.\ncolumns_to_fetch = [ 'claim_id', 'image_uri', 'identified_make', 'identified_model']\nimage_analysis_data = bf.read_gbq(\n    \"bqhackathonautoianalysis.autoAnalysis_Dataset.Image_Claims_Analysis\",\n    columns=columns_to_fetch\n)\nprint(\"\\nSuccessfully loaded make/model data. Columns:\", image_analysis_data.columns)\n\n# 12. Merge the two DataFrames\n# This performs a LEFT JOIN, keeping all records from `raw_images` and adding\n# matching make/model data from `image_analysis_data`.\nenriched_images = raw_images.merge(\n    image_analysis_data,\n    left_on='uri',         # Key in the original DataFrame\n    right_on='image_uri',    # Key in the new data\n    how='left'             # Keep all rows from the left DataFrame\n)\n\n# 13. Clean up the final DataFrame\n# The merge leaves a redundant 'image_uri' column, which we can drop.\nif 'image_uri' in enriched_images.columns:\n    enriched_images = enriched_images.drop(columns=['image_uri'])\n\n\n# --- Verification ---\nprint(\"\\n--- Final DataFrame Columns After Merge ---\")\nprint(enriched_images.columns)\n\nprint(\"\\n--- Sample of Final Enriched Data ---\")\n# Displaying the key columns plus the newly added ones to verify the merge\nprint(enriched_images[[\n    'uri', \n    'identified_make', \n    'identified_model',\n    'identified_damage_type', \n    'identified_damage_severity', \n    'confidence_score'\n]].head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:52:07.080234Z","iopub.execute_input":"2025-09-24T19:52:07.080607Z","iopub.status.idle":"2025-09-24T19:53:43.369555Z","shell.execute_reply.started":"2025-09-24T19:52:07.080551Z","shell.execute_reply":"2025-09-24T19:53:43.368493Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 92966163-df84-4841-80aa-9c716e605041 is DONE. 0 Bytes processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:92966163-df84-4841-80aa-9c716e605041&page=queryresults\">Open Job</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job c2d4beef-1427-4196-91fc-734e969adf6d is DONE. 0 Bytes processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:c2d4beef-1427-4196-91fc-734e969adf6d&page=queryresults\">Open Job</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job c734b1cb-8bb0-4ce3-95b7-7598b9fd340a is DONE. 4.8 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:c734b1cb-8bb0-4ce3-95b7-7598b9fd340a&page=queryresults\">Open Job</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 38a72c26-bfce-4e47-ad28-19711631f83c is DONE. 57.6 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:38a72c26-bfce-4e47-ad28-19711631f83c&page=queryresults\">Open Job</a>"},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/google/cloud/bigquery/_pandas_helpers.py:207: UserWarning: Unable to determine type for field 'bfuid_col_3461'.\n  warnings.warn(\"Unable to determine type for field '{}'.\".format(bq_field.name))\n","output_type":"stream"},{"name":"stdout","text":"                         ml_generate_text_llm_result  \\\n0  Okay, I will analyze the vehicle accident imag...   \n1  Okay, I will analyze the provided image and pr...   \n2  Okay, I will analyze the provided image (gs://...   \n3  Okay, I have analyzed the image. Here's my ass...   \n4  Okay, I will analyze the image and provide the...   \n\n  ml_generate_text_rai_result ml_generate_text_status  \\\n0                        <NA>                           \n1                        <NA>                           \n2                        <NA>                           \n3                        <NA>                           \n4                        <NA>                           \n\n                                              prompt  \n0  You are an AI claims inspector. Analyze the gi...  \n1  You are an AI claims inspector. Analyze the gi...  \n2  You are an AI claims inspector. Analyze the gi...  \n3  You are an AI claims inspector. Analyze the gi...  \n4  You are an AI claims inspector. Analyze the gi...  \n\n[5 rows x 4 columns]\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job d3461f38-f98b-4fb9-96a1-dec0f8e3deec is DONE. 0 Bytes processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:d3461f38-f98b-4fb9-96a1-dec0f8e3deec&page=queryresults\">Open Job</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 42f1b8e3-9735-4a3a-9ac5-b7428a0e3d35 is DONE. 41.7 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:42f1b8e3-9735-4a3a-9ac5-b7428a0e3d35&page=queryresults\">Open Job</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 71b0f840-7ff6-4a50-bdec-75a96ed491f5 is DONE. 42.4 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:71b0f840-7ff6-4a50-bdec-75a96ed491f5&page=queryresults\">Open Job</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 4583823a-c77d-4e0d-a3c1-d8c2bd24464d is DONE. 43.1 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:4583823a-c77d-4e0d-a3c1-d8c2bd24464d&page=queryresults\">Open Job</a>"},"metadata":{}},{"name":"stdout","text":"--- Starting Enrichment: Adding Vehicle Make and Model ---\n\nSuccessfully loaded make/model data. Columns: Index(['claim_id', 'image_uri', 'identified_make', 'identified_model'], dtype='object')\n\n--- Final DataFrame Columns After Merge ---\nIndex(['uri', 'generation', 'content_type', 'size', 'md5_hash', 'updated',\n       'metadata', 'ref', 'analysis_prompt', 'final_response',\n       'damage_type_prompt', 'damage_severity_prompt', 'confidence_prompt',\n       'identified_damage_type', 'identified_damage_severity',\n       'confidence_score', 'claim_id', 'identified_make', 'identified_model'],\n      dtype='object')\n\n--- Sample of Final Enriched Data ---\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 48e25f95-cb7c-42a5-89c7-982e244ac3ab is DONE. 114.1 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:48e25f95-cb7c-42a5-89c7-982e244ac3ab&page=queryresults\">Open Job</a>"},"metadata":{}},{"name":"stdout","text":"                                                 uri identified_make  \\\n0  gs://auto_insurance_analysis/Images_BigQuery/3...      Volkswagen   \n1  gs://auto_insurance_analysis/Images_BigQuery/6...       Chevrolet   \n2  gs://auto_insurance_analysis/Images_BigQuery/3...          Toyota   \n3  gs://auto_insurance_analysis/Images_BigQuery/3...          Toyota   \n4  gs://auto_insurance_analysis/Images_BigQuery/7...          Toyota   \n\n  identified_model                             identified_damage_type  \\\n0                   Dent, scratch, scrape, possible structural dam...   \n1             Aveo                                Dent and Scratches\n   \n2       Highlander                        Scratch, Dent, Deformation\n   \n3            Camry          Dent, Scratch, Cracked/Broken Tail Light\n   \n4            Camry                                Dent and Scratches\n   \n\n  identified_damage_severity  \\\n0                    Medium\n   \n1                    Medium\n   \n2                    Medium\n   \n3                    Medium\n   \n4   Damage severity: Medium\n   \n\n                                    confidence_score  \n0  Okay, here's my breakdown of why I'd assess a ...  \n1  Confidence Score: **0.85**\n\n**Reasoning:**\n\n* ...  \n2  Confidence Score: 0.85\n\n**Reasoning:**\n\nThe re...  \n3  Okay, I will assess the confidence score you p...  \n4  Okay, here's the breakdown of why I assigned a...  \n\n[5 rows x 6 columns]\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"import pandas as pd\n\n# Select the key columns and take 5 random rows\npreview_df = enriched_images[\n    [\"identified_make\", \"identified_model\", \"identified_damage_type\", \"identified_damage_severity\"\n    ]].to_pandas().sample(5, random_state=42)\n\n# Display as a styled HTML table\npreview_df.style.set_table_styles(\n    [\n        {\"selector\": \"th\", \"props\": [(\"background-color\", \"#f4f4f4\"), (\"font-weight\", \"bold\")]},\n        {\"selector\": \"td\", \"props\": [(\"padding\", \"8px\"), (\"border\", \"1px solid #ddd\")]}\n    ]\n).set_caption(\"Sample of Predicted Car Damage Analysis\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:53:43.370549Z","iopub.execute_input":"2025-09-24T19:53:43.370828Z","iopub.status.idle":"2025-09-24T19:53:44.933419Z","shell.execute_reply.started":"2025-09-24T19:53:43.370809Z","shell.execute_reply":"2025-09-24T19:53:44.931874Z"}},"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x78e35de36550>","text/html":"<style type=\"text/css\">\n#T_6502f th {\n  background-color: #f4f4f4;\n  font-weight: bold;\n}\n#T_6502f td {\n  padding: 8px;\n  border: 1px solid #ddd;\n}\n</style>\n<table id=\"T_6502f\">\n  <caption>Sample of Predicted Car Damage Analysis</caption>\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_6502f_level0_col0\" class=\"col_heading level0 col0\" >identified_make</th>\n      <th id=\"T_6502f_level0_col1\" class=\"col_heading level0 col1\" >identified_model</th>\n      <th id=\"T_6502f_level0_col2\" class=\"col_heading level0 col2\" >identified_damage_type</th>\n      <th id=\"T_6502f_level0_col3\" class=\"col_heading level0 col3\" >identified_damage_severity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_6502f_level0_row0\" class=\"row_heading level0 row0\" >22</th>\n      <td id=\"T_6502f_row0_col0\" class=\"data row0 col0\" >Renault</td>\n      <td id=\"T_6502f_row0_col1\" class=\"data row0 col1\" >Captur</td>\n      <td id=\"T_6502f_row0_col2\" class=\"data row0 col2\" >Dent and Scratches\n</td>\n      <td id=\"T_6502f_row0_col3\" class=\"data row0 col3\" >Low to Medium\n</td>\n    </tr>\n    <tr>\n      <th id=\"T_6502f_level0_row1\" class=\"row_heading level0 row1\" >0</th>\n      <td id=\"T_6502f_row1_col0\" class=\"data row1 col0\" >Volkswagen</td>\n      <td id=\"T_6502f_row1_col1\" class=\"data row1 col1\" ></td>\n      <td id=\"T_6502f_row1_col2\" class=\"data row1 col2\" >Dent, scratch, scrape, possible structural damage\n</td>\n      <td id=\"T_6502f_row1_col3\" class=\"data row1 col3\" >Medium\n</td>\n    </tr>\n    <tr>\n      <th id=\"T_6502f_level0_row2\" class=\"row_heading level0 row2\" >49</th>\n      <td id=\"T_6502f_row2_col0\" class=\"data row2 col0\" >Mazda</td>\n      <td id=\"T_6502f_row2_col1\" class=\"data row2 col1\" >2</td>\n      <td id=\"T_6502f_row2_col2\" class=\"data row2 col2\" >Crush, Bumper detachment, Potential Headlight fracture, Body Panel Deformation\n</td>\n      <td id=\"T_6502f_row2_col3\" class=\"data row2 col3\" >Medium to High\n</td>\n    </tr>\n    <tr>\n      <th id=\"T_6502f_level0_row3\" class=\"row_heading level0 row3\" >4</th>\n      <td id=\"T_6502f_row3_col0\" class=\"data row3 col0\" >Toyota</td>\n      <td id=\"T_6502f_row3_col1\" class=\"data row3 col1\" >Camry</td>\n      <td id=\"T_6502f_row3_col2\" class=\"data row3 col2\" >Dent and Scratches\n</td>\n      <td id=\"T_6502f_row3_col3\" class=\"data row3 col3\" >Damage severity: Medium\n</td>\n    </tr>\n    <tr>\n      <th id=\"T_6502f_level0_row4\" class=\"row_heading level0 row4\" >54</th>\n      <td id=\"T_6502f_row4_col0\" class=\"data row4 col0\" >Proton</td>\n      <td id=\"T_6502f_row4_col1\" class=\"data row4 col1\" >Saga</td>\n      <td id=\"T_6502f_row4_col2\" class=\"data row4 col2\" >Dent, Scratches, Cracked/Broken Taillight\n</td>\n      <td id=\"T_6502f_row4_col3\" class=\"data row4 col3\" >Medium\n</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}],"execution_count":44},{"cell_type":"markdown","source":"## ==============================================================================\n## Phase 2: Predicting Key Claim Metrics with Generative AI ---\n## This cell directly follows the previous one and uses the 'enriched_images' DataFrame.\n## Our goal is to predict: damage_location, airbag_deployed, drivable_post_accident,\n## and predicted_quote. We will also clean up the predicted_damage_severity.\n## ==============================================================================","metadata":{}},{"cell_type":"code","source":"# ==============================================================================\n# --- Phase 2: Predicting Key Claim Metrics (Presentation Ready v3) ---\n# This version fixes the KeyError and produces a polished output.\n# ==============================================================================\nimport bigframes.pandas as bf\nimport warnings\nimport logging\nimport bigframes # Import the top-level package to access exceptions\n\n# Suppress PreviewWarning and other informational logs for a clean output\nwarnings.filterwarnings(\"ignore\", category=bigframes.exceptions.PreviewWarning)\nlogging.basicConfig(level=logging.WARNING)\n\nprint(\"--- Phase 2: Starting Prediction of Key Claim Metrics ---\")\n\n# Initialize the GeminiTextGenerator model\nextractor = GeminiTextGenerator()\n\n# --- Step 1: Predict Damage Location ---\nenriched_images[\"damage_location_prompt\"] = \"You are an expert vehicle claims adjuster. Based on the following damage description, identify the primary location of the damage (e.g., 'Front Bumper'). Return ONLY the location as a short phrase.\\n\\nDescription: \" + enriched_images[\"final_response\"]\ndamage_location_output = extractor.predict(enriched_images[\"damage_location_prompt\"])\nenriched_images[\"damage_location\"] = damage_location_output[\"ml_generate_text_llm_result\"]\nprint(\"✅ Predicted Damage Location.\")\n\n# --- Step 2: Predict Airbag & Drivability ---\nenriched_images[\"airbag_prompt\"] = \"Given the accident description for a \" + enriched_images[\"identified_make\"] + \" \" + enriched_images[\"identified_model\"] + \", is it likely airbags deployed? Answer ONLY with 'True' or 'False'.\\n\\nDescription: \" + enriched_images[\"final_response\"]\nenriched_images[\"drivable_prompt\"] = \"Given the accident description, is the vehicle likely drivable? Answer ONLY with 'True' or 'False'.\\n\\nDescription: \" + enriched_images[\"final_response\"]\nairbag_output = extractor.predict(enriched_images[\"airbag_prompt\"])\nenriched_images[\"airbag_deployed\"] = airbag_output[\"ml_generate_text_llm_result\"].str.contains(\"True\", case=False)\ndrivable_output = extractor.predict(enriched_images[\"drivable_prompt\"])\nenriched_images[\"drivable_post_accident\"] = drivable_output[\"ml_generate_text_llm_result\"].str.contains(\"True\", case=False)\nprint(\"✅ Predicted Airbag Deployment and Drivability.\")\n\n# --- Step 3: Improved Severity Prediction and Parsing ---\nenriched_images[\"refined_severity_prompt\"] = (\n    \"Analyze the damage description below. Classify the severity as ONLY one of the following words: 'Low', 'Medium', or 'High'.\\n\\n\"\n    \"Description: \" + enriched_images[\"final_response\"]\n)\nseverity_output = extractor.predict(enriched_images[\"refined_severity_prompt\"])\nseverity_text = severity_output[\"ml_generate_text_llm_result\"]\n\n# Robustly parse the output to get clean labels\nregex_pattern = r'(?i)(Low|Medium|High)'\nextracted_severity_df = severity_text.str.extract(regex_pattern)\n# CORRECTED: Access the column using the string '0', not the integer 0.\nclean_severity = extracted_severity_df['0'].str.capitalize().fillna('Medium')\nenriched_images[\"predicted_damage_severity\"] = clean_severity\nprint(\"✅ Refined and Parsed Predicted Damage Severity.\")\n\n# --- Step 4: Predict Repair Quote ---\nenriched_images[\"quote_prompt\"] = \"You are an expert auto repair estimator. For a '\" + enriched_images[\"identified_make\"] + \" \" + enriched_images[\"identified_model\"] + \"' with '\" + enriched_images[\"predicted_damage_severity\"] + \"' damage, estimate the repair cost in USD. Return ONLY a single number.\\n\\nDescription: \" + enriched_images[\"final_response\"]\nquote_output = extractor.predict(enriched_images[\"quote_prompt\"])\nenriched_images[\"predicted_quote_text\"] = quote_output[\"ml_generate_text_llm_result\"]\n\n# Parse the numeric quote value\nregex_pattern_quote = r'(\\d*\\.?\\d+)'\nextracted_df_quote = enriched_images[\"predicted_quote_text\"].str.extract(regex_pattern_quote)\n# CORRECTED: Access the column using the string '0', not the integer 0.\nextracted_quote_str = extracted_df_quote['0'].fillna('0')\nnumeric_quote = extracted_quote_str.astype(float)\nenriched_images[\"predicted_quote\"] = numeric_quote\nprint(\"✅ Predicted and Parsed Repair Quote.\")\n\n# --- Step 5: Create the Final DataFrame for Presentation ---\nfinal_preview_df = enriched_images[[\n    'claim_id',\n    'identified_make',\n    'identified_model',\n    'damage_location',\n    'identified_damage_type',\n    'predicted_damage_severity',\n    'airbag_deployed',\n    'drivable_post_accident',\n    'predicted_quote'\n]]\n\n# --- FINAL, CLEAN OUTPUTS FOR JUDGES ---\n\n# Output 1: Display the final, parsed severity distribution\nprint(\"\\n--- Final AI-Predicted Severity Distribution ---\")\nseverity_counts = enriched_images[\"predicted_damage_severity\"].value_counts().to_pandas()\nprint(severity_counts)\n\n# Output 2: Display a sample of the final, enriched table\nprint(\"\\n--- Sample of Final Enriched Claims Data ---\")\ndisplay(final_preview_df.head(5))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:53:44.934445Z","iopub.execute_input":"2025-09-24T19:53:44.934721Z","iopub.status.idle":"2025-09-24T19:55:19.882116Z","shell.execute_reply.started":"2025-09-24T19:53:44.9347Z","shell.execute_reply":"2025-09-24T19:55:19.88088Z"}},"outputs":[{"name":"stdout","text":"--- Phase 2: Starting Prediction of Key Claim Metrics ---\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 23693f36-1bb3-4c79-ae0e-ecbc2c377a5c is DONE. 0 Bytes processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:23693f36-1bb3-4c79-ae0e-ecbc2c377a5c&page=queryresults\">Open Job</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 431847b8-e4f0-459f-9b44-cf665465afb6 is DONE. 49.2 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:431847b8-e4f0-459f-9b44-cf665465afb6&page=queryresults\">Open Job</a>"},"metadata":{}},{"name":"stdout","text":"✅ Predicted Damage Location.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 9e8b2516-0cae-41b4-8344-0d7ab85e34b0 is DONE. 49.9 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:9e8b2516-0cae-41b4-8344-0d7ab85e34b0&page=queryresults\">Open Job</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job c33772b6-9b43-4976-8b15-79ef30bf22a5 is DONE. 50.6 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:c33772b6-9b43-4976-8b15-79ef30bf22a5&page=queryresults\">Open Job</a>"},"metadata":{}},{"name":"stdout","text":"✅ Predicted Airbag Deployment and Drivability.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 02691ad2-470c-4925-a442-c5a77cc5009c is DONE. 51.3 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:02691ad2-470c-4925-a442-c5a77cc5009c&page=queryresults\">Open Job</a>"},"metadata":{}},{"name":"stdout","text":"✅ Refined and Parsed Predicted Damage Severity.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job 8e7ce8ae-9469-488d-a56f-a23dea8b18aa is DONE. 52.6 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:8e7ce8ae-9469-488d-a56f-a23dea8b18aa&page=queryresults\">Open Job</a>"},"metadata":{}},{"name":"stdout","text":"✅ Predicted and Parsed Repair Quote.\n\n--- Final AI-Predicted Severity Distribution ---\npredicted_damage_severity\nMedium\n    68\nHigh\n       1\nLow\n        1\nName: count, dtype: Int64\n\n--- Sample of Final Enriched Claims Data ---\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Query job a5a1109b-dd03-47fb-8082-ef75bb4fdfdb is DONE. 22.3 kB processed. <a target=\"_blank\" href=\"https://console.cloud.google.com/bigquery?project=bqhackathonautoianalysis&j=bq:us-central1:a5a1109b-dd03-47fb-8082-ef75bb4fdfdb&page=queryresults\">Open Job</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"  claim_id identified_make identified_model  \\\n0  CL-8036      Volkswagen                    \n1  CL-8064       Chevrolet             Aveo   \n2  CL-8033          Toyota       Highlander   \n3  CL-8034          Toyota            Camry   \n4  CL-8070          Toyota            Camry   \n\n                      damage_location  \\\n0  Driver's side front quarter panel\n   \n1          Front Passenger Side Door\n   \n2                 Rear Quarter Panel\n   \n3  Rear Quarter Panel and Tail Light\n   \n4                 Rear Quarter Panel\n   \n\n                              identified_damage_type  \\\n0  Dent, scratch, scrape, possible structural dam...   \n1                                Dent and Scratches\n   \n2                        Scratch, Dent, Deformation\n   \n3          Dent, Scratch, Cracked/Broken Tail Light\n   \n4                                Dent and Scratches\n   \n\n  predicted_damage_severity  airbag_deployed  drivable_post_accident  \\\n0                   Medium\n            False                   False   \n1                   Medium\n            False                   False   \n2                   Medium\n            False                   False   \n3                   Medium\n            False                   False   \n4                   Medium\n            False                   False   \n\n   predicted_quote  \n0           2800.0  \n1           1200.0  \n2           3200.0  \n3           1800.0  \n4           2800.0  \n\n[5 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>claim_id</th>\n      <th>identified_make</th>\n      <th>identified_model</th>\n      <th>damage_location</th>\n      <th>identified_damage_type</th>\n      <th>predicted_damage_severity</th>\n      <th>airbag_deployed</th>\n      <th>drivable_post_accident</th>\n      <th>predicted_quote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CL-8036</td>\n      <td>Volkswagen</td>\n      <td></td>\n      <td>Driver's side front quarter panel</td>\n      <td>Dent, scratch, scrape, possible structural dam...</td>\n      <td>Medium</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2800.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CL-8064</td>\n      <td>Chevrolet</td>\n      <td>Aveo</td>\n      <td>Front Passenger Side Door</td>\n      <td>Dent and Scratches</td>\n      <td>Medium</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1200.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CL-8033</td>\n      <td>Toyota</td>\n      <td>Highlander</td>\n      <td>Rear Quarter Panel</td>\n      <td>Scratch, Dent, Deformation</td>\n      <td>Medium</td>\n      <td>False</td>\n      <td>False</td>\n      <td>3200.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CL-8034</td>\n      <td>Toyota</td>\n      <td>Camry</td>\n      <td>Rear Quarter Panel and Tail Light</td>\n      <td>Dent, Scratch, Cracked/Broken Tail Light</td>\n      <td>Medium</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1800.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CL-8070</td>\n      <td>Toyota</td>\n      <td>Camry</td>\n      <td>Rear Quarter Panel</td>\n      <td>Dent and Scratches</td>\n      <td>Medium</td>\n      <td>False</td>\n      <td>False</td>\n      <td>2800.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9 columns</p>\n</div>[5 rows x 9 columns in total]"},"metadata":{}}],"execution_count":45},{"cell_type":"markdown","source":"The Executive Triage Dashboard Table","metadata":{}},{"cell_type":"code","source":"# ==============================================================================\n# --- Final Presentation: Polished Executive Triage Table (Top 10 Entries) ---\n# This cell takes the final predictions and formats them into a clean,\n# professional HTML table exactly as requested.\n# ==============================================================================\nimport pandas as pd # Ensure pandas is imported for styling\n\n# Fetch the top 10 rows from BigFrames into a standard pandas DataFrame.\n# Using .head(10).to_pandas() is efficient as it only brings a small sample into memory.\nfinal_pandas_df = final_preview_df.head(10).to_pandas()\n\n# Define the color-coding function for the severity column.\ndef style_severity(severity):\n    if severity is None:\n        return ''\n    # The .strip() and .lower() ensure robust matching (e.g., \" High \" becomes \"high\")\n    severity = str(severity).strip().lower()\n    if 'high' in severity:\n        return 'background-color: #ffcccc; color: #a60000; font-weight: bold;' # Red\n    elif 'medium' in severity:\n        return 'background-color: #ffebcc; color: #b85c00;' # Orange\n    elif 'low' in severity:\n        return 'background-color: #d6f5d6; color: #006400;' # Green\n    else:\n        return ''\n\n# Apply the full set of styles to create the final presentation table.\nstyled_df = final_pandas_df.style \\\n    .set_caption(\"Live Triage: AI-Predicted Claim Attributes (Top 10 Sample)\") \\\n    .set_table_styles([\n        {'selector': 'th', 'props': [\n            ('background-color', '#f2f2f2'),\n            ('font-weight', 'bold'),\n            ('text-align', 'left'),\n            ('padding', '8px'),\n            ('border', '1px solid #ddd')\n        ]},\n        {'selector': 'td', 'props': [\n            ('padding', '8px'),\n            ('border', '1px solid #ddd'),\n            ('text-align', 'left') # Default alignment for text\n        ]},\n        {'selector': 'caption', 'props': [\n            ('color', 'black'),\n            ('font-size', '1.3em'),\n            ('font-weight', 'bold'),\n            ('margin-bottom', '10px')\n        ]}\n    ]) \\\n    .format({\n        \"predicted_quote\": \"${:,.2f}\",  # Format as currency\n        \"airbag_deployed\": lambda x: '✔️ Yes' if x else '❌ No',\n        \"drivable_post_accident\": lambda x: '✔️ Yes' if x else '❌ No'\n    }) \\\n    .apply(lambda s: s.map(style_severity), subset=['predicted_damage_severity']) \\\n    .set_properties(**{'text-align': 'center'}, subset=['airbag_deployed', 'drivable_post_accident', 'predicted_damage_severity']) \\\n    .set_properties(**{'text-align': 'right'}, subset=['predicted_quote']) \\\n    .hide(axis='index')\n\n# Display the final, styled table.\ndisplay(styled_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:55:19.883172Z","iopub.execute_input":"2025-09-24T19:55:19.88349Z","iopub.status.idle":"2025-09-24T19:55:23.48193Z","shell.execute_reply.started":"2025-09-24T19:55:19.883463Z","shell.execute_reply":"2025-09-24T19:55:23.480854Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<pandas.io.formats.style.Styler at 0x78e3567fa610>","text/html":"<style type=\"text/css\">\n#T_16e92 th {\n  background-color: #f2f2f2;\n  font-weight: bold;\n  text-align: left;\n  padding: 8px;\n  border: 1px solid #ddd;\n}\n#T_16e92 td {\n  padding: 8px;\n  border: 1px solid #ddd;\n  text-align: left;\n}\n#T_16e92 caption {\n  color: black;\n  font-size: 1.3em;\n  font-weight: bold;\n  margin-bottom: 10px;\n}\n#T_16e92_row0_col5, #T_16e92_row1_col5, #T_16e92_row2_col5, #T_16e92_row3_col5, #T_16e92_row4_col5, #T_16e92_row5_col5, #T_16e92_row6_col5, #T_16e92_row7_col5, #T_16e92_row8_col5, #T_16e92_row9_col5 {\n  background-color: #ffebcc;\n  color: #b85c00;\n  text-align: center;\n}\n#T_16e92_row0_col6, #T_16e92_row0_col7, #T_16e92_row1_col6, #T_16e92_row1_col7, #T_16e92_row2_col6, #T_16e92_row2_col7, #T_16e92_row3_col6, #T_16e92_row3_col7, #T_16e92_row4_col6, #T_16e92_row4_col7, #T_16e92_row5_col6, #T_16e92_row5_col7, #T_16e92_row6_col6, #T_16e92_row6_col7, #T_16e92_row7_col6, #T_16e92_row7_col7, #T_16e92_row8_col6, #T_16e92_row8_col7, #T_16e92_row9_col6, #T_16e92_row9_col7 {\n  text-align: center;\n}\n#T_16e92_row0_col8, #T_16e92_row1_col8, #T_16e92_row2_col8, #T_16e92_row3_col8, #T_16e92_row4_col8, #T_16e92_row5_col8, #T_16e92_row6_col8, #T_16e92_row7_col8, #T_16e92_row8_col8, #T_16e92_row9_col8 {\n  text-align: right;\n}\n</style>\n<table id=\"T_16e92\">\n  <caption>Live Triage: AI-Predicted Claim Attributes (Top 10 Sample)</caption>\n  <thead>\n    <tr>\n      <th id=\"T_16e92_level0_col0\" class=\"col_heading level0 col0\" >claim_id</th>\n      <th id=\"T_16e92_level0_col1\" class=\"col_heading level0 col1\" >identified_make</th>\n      <th id=\"T_16e92_level0_col2\" class=\"col_heading level0 col2\" >identified_model</th>\n      <th id=\"T_16e92_level0_col3\" class=\"col_heading level0 col3\" >damage_location</th>\n      <th id=\"T_16e92_level0_col4\" class=\"col_heading level0 col4\" >identified_damage_type</th>\n      <th id=\"T_16e92_level0_col5\" class=\"col_heading level0 col5\" >predicted_damage_severity</th>\n      <th id=\"T_16e92_level0_col6\" class=\"col_heading level0 col6\" >airbag_deployed</th>\n      <th id=\"T_16e92_level0_col7\" class=\"col_heading level0 col7\" >drivable_post_accident</th>\n      <th id=\"T_16e92_level0_col8\" class=\"col_heading level0 col8\" >predicted_quote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td id=\"T_16e92_row0_col0\" class=\"data row0 col0\" >CL-8036</td>\n      <td id=\"T_16e92_row0_col1\" class=\"data row0 col1\" >Volkswagen</td>\n      <td id=\"T_16e92_row0_col2\" class=\"data row0 col2\" ></td>\n      <td id=\"T_16e92_row0_col3\" class=\"data row0 col3\" >Driver's side front quarter panel\n</td>\n      <td id=\"T_16e92_row0_col4\" class=\"data row0 col4\" >Dent, scratch, scrape, possible structural damage\n</td>\n      <td id=\"T_16e92_row0_col5\" class=\"data row0 col5\" >Medium\n</td>\n      <td id=\"T_16e92_row0_col6\" class=\"data row0 col6\" >❌ No</td>\n      <td id=\"T_16e92_row0_col7\" class=\"data row0 col7\" >❌ No</td>\n      <td id=\"T_16e92_row0_col8\" class=\"data row0 col8\" >$2,800.00</td>\n    </tr>\n    <tr>\n      <td id=\"T_16e92_row1_col0\" class=\"data row1 col0\" >CL-8064</td>\n      <td id=\"T_16e92_row1_col1\" class=\"data row1 col1\" >Chevrolet</td>\n      <td id=\"T_16e92_row1_col2\" class=\"data row1 col2\" >Aveo</td>\n      <td id=\"T_16e92_row1_col3\" class=\"data row1 col3\" >Front Passenger Side Door\n</td>\n      <td id=\"T_16e92_row1_col4\" class=\"data row1 col4\" >Dent and Scratches\n</td>\n      <td id=\"T_16e92_row1_col5\" class=\"data row1 col5\" >Medium\n</td>\n      <td id=\"T_16e92_row1_col6\" class=\"data row1 col6\" >❌ No</td>\n      <td id=\"T_16e92_row1_col7\" class=\"data row1 col7\" >❌ No</td>\n      <td id=\"T_16e92_row1_col8\" class=\"data row1 col8\" >$1,200.00</td>\n    </tr>\n    <tr>\n      <td id=\"T_16e92_row2_col0\" class=\"data row2 col0\" >CL-8033</td>\n      <td id=\"T_16e92_row2_col1\" class=\"data row2 col1\" >Toyota</td>\n      <td id=\"T_16e92_row2_col2\" class=\"data row2 col2\" >Highlander</td>\n      <td id=\"T_16e92_row2_col3\" class=\"data row2 col3\" >Rear Quarter Panel\n</td>\n      <td id=\"T_16e92_row2_col4\" class=\"data row2 col4\" >Scratch, Dent, Deformation\n</td>\n      <td id=\"T_16e92_row2_col5\" class=\"data row2 col5\" >Medium\n</td>\n      <td id=\"T_16e92_row2_col6\" class=\"data row2 col6\" >❌ No</td>\n      <td id=\"T_16e92_row2_col7\" class=\"data row2 col7\" >❌ No</td>\n      <td id=\"T_16e92_row2_col8\" class=\"data row2 col8\" >$3,200.00</td>\n    </tr>\n    <tr>\n      <td id=\"T_16e92_row3_col0\" class=\"data row3 col0\" >CL-8034</td>\n      <td id=\"T_16e92_row3_col1\" class=\"data row3 col1\" >Toyota</td>\n      <td id=\"T_16e92_row3_col2\" class=\"data row3 col2\" >Camry</td>\n      <td id=\"T_16e92_row3_col3\" class=\"data row3 col3\" >Rear Quarter Panel and Tail Light\n</td>\n      <td id=\"T_16e92_row3_col4\" class=\"data row3 col4\" >Dent, Scratch, Cracked/Broken Tail Light\n</td>\n      <td id=\"T_16e92_row3_col5\" class=\"data row3 col5\" >Medium\n</td>\n      <td id=\"T_16e92_row3_col6\" class=\"data row3 col6\" >❌ No</td>\n      <td id=\"T_16e92_row3_col7\" class=\"data row3 col7\" >❌ No</td>\n      <td id=\"T_16e92_row3_col8\" class=\"data row3 col8\" >$1,800.00</td>\n    </tr>\n    <tr>\n      <td id=\"T_16e92_row4_col0\" class=\"data row4 col0\" >CL-8070</td>\n      <td id=\"T_16e92_row4_col1\" class=\"data row4 col1\" >Toyota</td>\n      <td id=\"T_16e92_row4_col2\" class=\"data row4 col2\" >Camry</td>\n      <td id=\"T_16e92_row4_col3\" class=\"data row4 col3\" >Rear Quarter Panel\n</td>\n      <td id=\"T_16e92_row4_col4\" class=\"data row4 col4\" >Dent and Scratches\n</td>\n      <td id=\"T_16e92_row4_col5\" class=\"data row4 col5\" >Medium\n</td>\n      <td id=\"T_16e92_row4_col6\" class=\"data row4 col6\" >❌ No</td>\n      <td id=\"T_16e92_row4_col7\" class=\"data row4 col7\" >❌ No</td>\n      <td id=\"T_16e92_row4_col8\" class=\"data row4 col8\" >$2,800.00</td>\n    </tr>\n    <tr>\n      <td id=\"T_16e92_row5_col0\" class=\"data row5 col0\" >CL-8053</td>\n      <td id=\"T_16e92_row5_col1\" class=\"data row5 col1\" >Volkswagen</td>\n      <td id=\"T_16e92_row5_col2\" class=\"data row5 col2\" >Fox</td>\n      <td id=\"T_16e92_row5_col3\" class=\"data row5 col3\" >Front Passenger Door\n</td>\n      <td id=\"T_16e92_row5_col4\" class=\"data row5 col4\" >Dent, Scratch\n</td>\n      <td id=\"T_16e92_row5_col5\" class=\"data row5 col5\" >Medium\n</td>\n      <td id=\"T_16e92_row5_col6\" class=\"data row5 col6\" >❌ No</td>\n      <td id=\"T_16e92_row5_col7\" class=\"data row5 col7\" >❌ No</td>\n      <td id=\"T_16e92_row5_col8\" class=\"data row5 col8\" >$1,800.00</td>\n    </tr>\n    <tr>\n      <td id=\"T_16e92_row6_col0\" class=\"data row6 col0\" >CL-8051</td>\n      <td id=\"T_16e92_row6_col1\" class=\"data row6 col1\" >Volkswagen</td>\n      <td id=\"T_16e92_row6_col2\" class=\"data row6 col2\" >Golf</td>\n      <td id=\"T_16e92_row6_col3\" class=\"data row6 col3\" >Front Passenger-Side Door\n</td>\n      <td id=\"T_16e92_row6_col4\" class=\"data row6 col4\" >Dent, Scratch\n</td>\n      <td id=\"T_16e92_row6_col5\" class=\"data row6 col5\" >Medium\n</td>\n      <td id=\"T_16e92_row6_col6\" class=\"data row6 col6\" >❌ No</td>\n      <td id=\"T_16e92_row6_col7\" class=\"data row6 col7\" >❌ No</td>\n      <td id=\"T_16e92_row6_col8\" class=\"data row6 col8\" >$2,100.00</td>\n    </tr>\n    <tr>\n      <td id=\"T_16e92_row7_col0\" class=\"data row7 col0\" >CL-8022</td>\n      <td id=\"T_16e92_row7_col1\" class=\"data row7 col1\" >Volkswagen</td>\n      <td id=\"T_16e92_row7_col2\" class=\"data row7 col2\" >Golf</td>\n      <td id=\"T_16e92_row7_col3\" class=\"data row7 col3\" >Rear Quarter Panel\n</td>\n      <td id=\"T_16e92_row7_col4\" class=\"data row7 col4\" >Dent, Scratch, Cracked/Broken Tail Light\n</td>\n      <td id=\"T_16e92_row7_col5\" class=\"data row7 col5\" >Medium\n</td>\n      <td id=\"T_16e92_row7_col6\" class=\"data row7 col6\" >❌ No</td>\n      <td id=\"T_16e92_row7_col7\" class=\"data row7 col7\" >❌ No</td>\n      <td id=\"T_16e92_row7_col8\" class=\"data row7 col8\" >$1,800.00</td>\n    </tr>\n    <tr>\n      <td id=\"T_16e92_row8_col0\" class=\"data row8 col0\" >CL-8055</td>\n      <td id=\"T_16e92_row8_col1\" class=\"data row8 col1\" >Honda</td>\n      <td id=\"T_16e92_row8_col2\" class=\"data row8 col2\" >Civic</td>\n      <td id=\"T_16e92_row8_col3\" class=\"data row8 col3\" >Rear Quarter Panel\n</td>\n      <td id=\"T_16e92_row8_col4\" class=\"data row8 col4\" >Dent, scratch\n</td>\n      <td id=\"T_16e92_row8_col5\" class=\"data row8 col5\" >Medium\n</td>\n      <td id=\"T_16e92_row8_col6\" class=\"data row8 col6\" >❌ No</td>\n      <td id=\"T_16e92_row8_col7\" class=\"data row8 col7\" >❌ No</td>\n      <td id=\"T_16e92_row8_col8\" class=\"data row8 col8\" >$2,300.00</td>\n    </tr>\n    <tr>\n      <td id=\"T_16e92_row9_col0\" class=\"data row9 col0\" >CL-8052</td>\n      <td id=\"T_16e92_row9_col1\" class=\"data row9 col1\" >Renault</td>\n      <td id=\"T_16e92_row9_col2\" class=\"data row9 col2\" ></td>\n      <td id=\"T_16e92_row9_col3\" class=\"data row9 col3\" >Front Fender\n</td>\n      <td id=\"T_16e92_row9_col4\" class=\"data row9 col4\" >Scratch, Dent\n</td>\n      <td id=\"T_16e92_row9_col5\" class=\"data row9 col5\" >Medium\n</td>\n      <td id=\"T_16e92_row9_col6\" class=\"data row9 col6\" >❌ No</td>\n      <td id=\"T_16e92_row9_col7\" class=\"data row9 col7\" >❌ No</td>\n      <td id=\"T_16e92_row9_col8\" class=\"data row9 col8\" >$2,400.00</td>\n    </tr>\n  </tbody>\n</table>\n"},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"\n# ==============================================================================\n# --- Validation & Summary: Final Severity Distribution (CORRECTED) ---\n# This cell provides a high-level overview of the final prediction results,\n# proving the success of our data refinement.\n# ==============================================================================\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Ensure a professional plot style\nsns.set_style(\"whitegrid\")\n\n# --- ROBUST FIX 1: NORMALIZE THE DATA ---\n# Convert the generated severity to lowercase and strip any extra spaces.\n# This makes the data consistent and prevents errors from minor AI variations.\nfinal_preview_df[\"predicted_damage_severity\"] = final_preview_df[\"predicted_damage_severity\"].str.lower().str.strip()\n\n# Get the final counts of each severity level from the BigFrames DataFrame\nfinal_severity_counts = final_preview_df[\"predicted_damage_severity\"].value_counts().to_pandas()\n\n# --- Part 1: The Raw Numbers (For the Report) ---\nprint(\"--- Final Distribution of Predicted Damage Severity ---\")\nprint(\"After refining the prompts and robustly parsing the output, the final counts are:\")\nprint(final_severity_counts)\nprint(\"\\n\" + \"=\"*50 + \"\\n\") # Visual separator\n\n# --- Part 2: The Executive Visualization ---\n# Create a bar chart to visually represent the distribution\nplt.figure(figsize=(10, 6))\n\n# --- ROBUST FIX 2: UPDATE INDEX AND PALETTE TO MATCH NORMALIZED DATA ---\n# Use lowercase for the index and palette keys to match the cleaned data.\nordered_index = pd.Index(['low', 'medium', 'high']).intersection(final_severity_counts.index)\n\n# Ensure the palette keys are also lowercase\npalette = {'low': '#90ee90', 'medium': '#ffcc99', 'high': '#ff9999'}\n\n# Check if there is anything to plot to avoid the error completely\nif not ordered_index.empty:\n    sns.barplot(\n        x=ordered_index,\n        y=final_severity_counts.loc[ordered_index],\n        palette=palette,\n        edgecolor='black'\n    )\n    plt.title('Final Count of Claims by AI-Predicted Severity', fontsize=16, fontweight='bold')\n    plt.xlabel('Predicted Damage Severity', fontsize=12)\n    plt.ylabel('Number of Claims', fontsize=12)\n    \n    # Add data labels on top of the bars for clarity\n    for index, value in enumerate(final_severity_counts.loc[ordered_index]):\n        plt.text(index, value + 0.5, str(value), ha='center', va='bottom', fontsize=12, fontweight='bold')\n    \n    plt.show()\nelse:\n    print(\"⚠️ No data available to plot for severity distribution. The `ordered_index` is empty.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:55:23.483352Z","iopub.execute_input":"2025-09-24T19:55:23.483673Z","iopub.status.idle":"2025-09-24T19:55:26.440576Z","shell.execute_reply.started":"2025-09-24T19:55:23.483643Z","shell.execute_reply":"2025-09-24T19:55:26.439643Z"}},"outputs":[{"name":"stdout","text":"--- Final Distribution of Predicted Damage Severity ---\nAfter refining the prompts and robustly parsing the output, the final counts are:\npredicted_damage_severity\nmedium    68\nhigh       1\nlow        1\nName: count, dtype: Int64\n\n==================================================\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":47},{"cell_type":"markdown","source":"**Styled Executive Triage Table**\nThis cell takes the final predictions and formats them for clear business insights.","metadata":{}},{"cell_type":"markdown","source":"Financial Impact Analysis - Average Repair Cost","metadata":{}},{"cell_type":"code","source":"# ==============================================================================\n# --- Stakeholder View 1: Financial Impact Analysis (Presentation Ready v2) ---\n# This version corrects the AttributeError and enhances readability.\n# ==============================================================================\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.ticker import StrMethodFormatter\n\n# Set a professional plot style\nsns.set_style(\"whitegrid\")\n\n# --- Data Cleaning for Consistent Plotting ---\n# CORRECTED: Use .str.capitalize() which is supported by BigFrames.\n# For single words like 'Low' or 'High', it works the same as .title().\nenriched_images[\"predicted_damage_severity\"] = enriched_images[\"predicted_damage_severity\"].str.strip().str.capitalize()\nenriched_images[\"identified_make\"] = enriched_images[\"identified_make\"].str.strip().str.capitalize()\n\n\n# --- Analysis 1: Average Quote by Damage Severity ---\n# Group by the now-clean severity column\navg_quote_by_severity = enriched_images.groupby(\"predicted_damage_severity\")[\"predicted_quote\"].mean().to_pandas().sort_values()\n\n# Create the plot using matplotlib's axes for more control\nfig, ax = plt.subplots(figsize=(10, 6))\n# Ensure the order uses the same capitalization\nsns.barplot(x=avg_quote_by_severity.index, y=avg_quote_by_severity.values, palette=\"Reds\", ax=ax, order=['Low', 'Medium', 'High'])\n\n# Add clear data labels on top of each bar\nax.bar_label(ax.containers[0], fmt='${:,.0f}', fontsize=12, fontweight='bold', padding=3)\n\n# Set well-defined titles and labels\nax.set_title('Average Predicted Repair Quote by Damage Severity', fontsize=16, fontweight='bold')\nax.set_xlabel('AI-Predicted Damage Severity', fontsize=12)\nax.set_ylabel('Average Quote (USD)', fontsize=12)\nax.yaxis.set_major_formatter(StrMethodFormatter('${x:,.0f}')) # Format y-axis as currency\n\n# Adjust layout to prevent any overlap\nplt.tight_layout()\nplt.show()\n\n\n# --- Analysis 2: Average Quote by Vehicle Make (Top 10) ---\n# Group by the now-clean make column\navg_quote_by_make = enriched_images.groupby(\"identified_make\")[\"predicted_quote\"].mean().to_pandas().nlargest(10).sort_values()\n\n# Create the horizontal bar plot\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.barplot(x=avg_quote_by_make.values, y=avg_quote_by_make.index, palette=\"Blues_r\", orient='h', ax=ax)\n\n# Add clear data labels to the right of each bar\nax.bar_label(ax.containers[0], fmt=' ${:,.0f}', fontsize=11, fontweight='bold', padding=5)\n\n# Set well-defined titles and labels\nax.set_title('Top 10 Most Expensive Vehicle Makes to Repair', fontsize=16, fontweight='bold')\nax.set_xlabel('Average Quote (USD)', fontsize=12)\nax.set_ylabel('AI-Identified Vehicle Make', fontsize=12)\nax.xaxis.set_major_formatter(StrMethodFormatter('${x:,.0f}')) # Format x-axis as currency\n\n# Ensure the x-axis has some padding so labels don't get cut off\nax.set_xlim(right=avg_quote_by_make.max() * 1.15) \n\n# Adjust layout to prevent any overlap\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:55:26.441524Z","iopub.execute_input":"2025-09-24T19:55:26.44181Z","iopub.status.idle":"2025-09-24T19:55:32.136624Z","shell.execute_reply.started":"2025-09-24T19:55:26.44179Z","shell.execute_reply":"2025-09-24T19:55:32.135622Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":48},{"cell_type":"markdown","source":"Operational Triage Analysis - Damage Hotspots","metadata":{}},{"cell_type":"code","source":"# ==============================================================================\n# --- Stakeholder View 2: Operational Triage - Damage Hotspots ---\n# ==============================================================================\n\n# Calculate the frequency of each damage location\ndamage_location_counts = enriched_images[\"damage_location\"].value_counts().to_pandas().nlargest(10)\n\nplt.figure(figsize=(12, 7))\nlocation_plot = sns.barplot(x=damage_location_counts.values, y=damage_location_counts.index, palette=\"viridis\", orient='h')\nplt.title('Top 10 Most Common Damage Locations', fontsize=16, fontweight='bold')\nplt.xlabel('Number of Claims', fontsize=12)\nplt.ylabel('Damage Location', fontsize=12)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:55:32.137764Z","iopub.execute_input":"2025-09-24T19:55:32.138047Z","iopub.status.idle":"2025-09-24T19:55:34.889119Z","shell.execute_reply.started":"2025-09-24T19:55:32.138028Z","shell.execute_reply":"2025-09-24T19:55:34.887931Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x700 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"# ==============================================================================\n# --- Step 6: Save Final Output Files for Submission (Robust Version) ---\n# This cell safely saves a representative sample of the key resulting DataFrames\n# as CSV files, with clear error handling.\n# ==============================================================================\nimport bigframes.pandas as bf\n\nprint(\"--- Saving final output files to /kaggle/working/ ---\")\n\n# Define the output file paths\nenriched_claims_output_path = \"/kaggle/working/FINAL_Enriched_Claims_Data_Sample.csv\"\nhigh_priority_output_path = \"/kaggle/working/FINAL_High_Priority_Claims_Sample.csv\"\n\n# --- Save the main enriched DataFrame ---\ntry:\n    # First, check if the DataFrame exists in the notebook's memory\n    if 'final_preview_df' in locals():\n        print(\"DataFrame 'final_preview_df' found. Saving a sample of up to 1000 rows...\")\n        \n        # Use .head(1000).to_pandas() to get a sample and prevent memory errors\n        final_preview_df.head(1000).to_pandas().to_csv(enriched_claims_output_path, index=False)\n        \n        print(f\"✅ Successfully saved enriched claims data sample to: {enriched_claims_output_path}\")\n    else:\n        print(\"❌ Error: DataFrame 'final_preview_df' was not found. Please re-run the preceding 'Phase 2' cell.\")\n\nexcept Exception as e:\n    print(f\"\\n❌ An unexpected error occurred while saving 'final_preview_df'.\")\n    print(f\"   Error details: {e}\")\n\n# --- Save the high-priority claims DataFrame ---\ntry:\n    # Check if the high-priority DataFrame exists\n    if 'high_priority_claims' in locals():\n        print(\"\\nDataFrame 'high_priority_claims' found. Saving a sample of up to 1000 rows...\")\n        \n        # Save a sample of the high-priority claims\n        high_priority_claims.head(1000).to_pandas().to_csv(high_priority_output_path, index=False)\n        \n        print(f\"✅ Successfully saved high-priority claims sample to: {high_priority_output_path}\")\n    else:\n        print(\"\\n❌ Error: DataFrame 'high_priority_claims' was not found. Please re-run the preceding 'Phase 2' cell.\")\n\nexcept Exception as e:\n    print(f\"\\n❌ An unexpected error occurred while saving 'high_priority_claims'.\")\n    print(f\"   Error details: {e}\")\n\n# ==============================================================================\n# You can now commit the notebook. The generated CSV files will be available\n# for download from the notebook's output tab.\n# ==============================================================================","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-24T19:55:34.890466Z","iopub.execute_input":"2025-09-24T19:55:34.890815Z","iopub.status.idle":"2025-09-24T19:55:37.806273Z","shell.execute_reply.started":"2025-09-24T19:55:34.890789Z","shell.execute_reply":"2025-09-24T19:55:37.80532Z"}},"outputs":[{"name":"stdout","text":"--- Saving final output files to /kaggle/working/ ---\nDataFrame 'final_preview_df' found. Saving a sample of up to 1000 rows...\n✅ Successfully saved enriched claims data sample to: /kaggle/working/FINAL_Enriched_Claims_Data_Sample.csv\n\n❌ Error: DataFrame 'high_priority_claims' was not found. Please re-run the preceding 'Phase 2' cell.\n","output_type":"stream"}],"execution_count":50},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}